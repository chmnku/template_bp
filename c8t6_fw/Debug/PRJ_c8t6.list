
PRJ_c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008360  08008360  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08008360  08008360  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008360  08008360  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08008368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  200001cc  08008534  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000131c  08008534  0002131c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5db  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e00  00000000  00000000  0002c813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000083a  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a23d  00000000  00000000  000309ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013298  00000000  00000000  0004abf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084e2b  00000000  00000000  0005de8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fc0  00000000  00000000  000e2cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e5c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08008294 	.word	0x08008294

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08008294 	.word	0x08008294

0800014c <apInit>:
//extern void cdcDataIn(uint32_t rx_data);
//extern uint8_t cdcRead(void);
//extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);

void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  //
  uartOpen(_DEF_UART1, 57600);
 8000150:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 f9c9 	bl	80004ec <uartOpen>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
	...

08000160 <apMain>:

void apMain(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  pre_time = millis();
 8000166:	f000 f827 	bl	80001b8 <millis>
 800016a:	6078      	str	r0, [r7, #4]

  while(1)
  {
    if(millis() - pre_time >= 100)
 800016c:	f000 f824 	bl	80001b8 <millis>
 8000170:	4602      	mov	r2, r0
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	1ad3      	subs	r3, r2, r3
 8000176:	2b63      	cmp	r3, #99	; 0x63
 8000178:	d907      	bls.n	800018a <apMain+0x2a>
    {
      pre_time = millis();
 800017a:	f000 f81d 	bl	80001b8 <millis>
 800017e:	6078      	str	r0, [r7, #4]
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000184:	480a      	ldr	r0, [pc, #40]	; (80001b0 <apMain+0x50>)
 8000186:	f000 fd55 	bl	8000c34 <HAL_GPIO_TogglePin>
    }

    if (uartAvailable(_DEF_UART1) > 0)
 800018a:	2000      	movs	r0, #0
 800018c:	f000 f9c8 	bl	8000520 <uartAvailable>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d0ea      	beq.n	800016c <apMain+0xc>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 8000196:	2000      	movs	r0, #0
 8000198:	f000 f9d5 	bl	8000546 <uartRead>
 800019c:	4603      	mov	r3, r0
 800019e:	70fb      	strb	r3, [r7, #3]

      uartPrintf(_DEF_UART1, "RxData : %c 0x%X\n", rx_data, rx_data);
 80001a0:	78fa      	ldrb	r2, [r7, #3]
 80001a2:	78fb      	ldrb	r3, [r7, #3]
 80001a4:	4903      	ldr	r1, [pc, #12]	; (80001b4 <apMain+0x54>)
 80001a6:	2000      	movs	r0, #0
 80001a8:	f000 f9f7 	bl	800059a <uartPrintf>
    if(millis() - pre_time >= 100)
 80001ac:	e7de      	b.n	800016c <apMain+0xc>
 80001ae:	bf00      	nop
 80001b0:	40011000 	.word	0x40011000
 80001b4:	080082ac 	.word	0x080082ac

080001b8 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80001bc:	f000 fa86 	bl	80006cc <HAL_GetTick>
 80001c0:	4603      	mov	r3, r0
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	bd80      	pop	{r7, pc}
	...

080001c8 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
  HAL_Init();
 80001ce:	f000 fa25 	bl	800061c <HAL_Init>
  SystemClock_Config();
 80001d2:	f000 f84b 	bl	800026c <SystemClock_Config>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d6:	f107 0310 	add.w	r3, r7, #16
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e4:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <bspInit+0x9c>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a1e      	ldr	r2, [pc, #120]	; (8000264 <bspInit+0x9c>)
 80001ea:	f043 0310 	orr.w	r3, r3, #16
 80001ee:	6193      	str	r3, [r2, #24]
 80001f0:	4b1c      	ldr	r3, [pc, #112]	; (8000264 <bspInit+0x9c>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	f003 0310 	and.w	r3, r3, #16
 80001f8:	60fb      	str	r3, [r7, #12]
 80001fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <bspInit+0x9c>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	4a18      	ldr	r2, [pc, #96]	; (8000264 <bspInit+0x9c>)
 8000202:	f043 0320 	orr.w	r3, r3, #32
 8000206:	6193      	str	r3, [r2, #24]
 8000208:	4b16      	ldr	r3, [pc, #88]	; (8000264 <bspInit+0x9c>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	f003 0320 	and.w	r3, r3, #32
 8000210:	60bb      	str	r3, [r7, #8]
 8000212:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000214:	4b13      	ldr	r3, [pc, #76]	; (8000264 <bspInit+0x9c>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a12      	ldr	r2, [pc, #72]	; (8000264 <bspInit+0x9c>)
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6193      	str	r3, [r2, #24]
 8000220:	4b10      	ldr	r3, [pc, #64]	; (8000264 <bspInit+0x9c>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f003 0304 	and.w	r3, r3, #4
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]

  /* USB Device Initialization */
  MX_USB_DEVICE_Init();
 800022c:	f006 fe2a 	bl	8006e84 <MX_USB_DEVICE_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000236:	480c      	ldr	r0, [pc, #48]	; (8000268 <bspInit+0xa0>)
 8000238:	f000 fce4 	bl	8000c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800023c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000242:	2301      	movs	r3, #1
 8000244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024a:	2302      	movs	r3, #2
 800024c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800024e:	f107 0310 	add.w	r3, r7, #16
 8000252:	4619      	mov	r1, r3
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <bspInit+0xa0>)
 8000256:	f000 fb51 	bl	80008fc <HAL_GPIO_Init>
}
 800025a:	bf00      	nop
 800025c:	3720      	adds	r7, #32
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000
 8000268:	40011000 	.word	0x40011000

0800026c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b094      	sub	sp, #80	; 0x50
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f007 fb78 	bl	8007970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029c:	2301      	movs	r3, #1
 800029e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fa3e 	bl	8002744 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ce:	f000 f827 	bl	8000320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fcaa 	bl	8002c48 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002fa:	f000 f811 	bl	8000320 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002fe:	2310      	movs	r3, #16
 8000300:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f002 fdf9 	bl	8002f00 <HAL_RCCEx_PeriphCLKConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000314:	f000 f804 	bl	8000320 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3750      	adds	r7, #80	; 0x50
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000324:	b672      	cpsid	i
}
 8000326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000328:	e7fe      	b.n	8000328 <Error_Handler+0x8>
	...

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <HAL_MspInit+0x5c>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a14      	ldr	r2, [pc, #80]	; (8000388 <HAL_MspInit+0x5c>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <HAL_MspInit+0x5c>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <HAL_MspInit+0x5c>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <HAL_MspInit+0x5c>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000354:	61d3      	str	r3, [r2, #28]
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <HAL_MspInit+0x5c>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <HAL_MspInit+0x60>)
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <HAL_MspInit+0x60>)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000
 800038c:	40010000 	.word	0x40010000

08000390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000394:	e7fe      	b.n	8000394 <NMI_Handler+0x4>

08000396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800039a:	e7fe      	b.n	800039a <HardFault_Handler+0x4>

0800039c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <MemManage_Handler+0x4>

080003a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <BusFault_Handler+0x4>

080003a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <UsageFault_Handler+0x4>

080003ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr

080003c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr

080003d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d6:	f000 f967 	bl	80006a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003e4:	4802      	ldr	r0, [pc, #8]	; (80003f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003e6:	f000 fd63 	bl	8000eb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000cc4 	.word	0x20000cc4

080003f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003fc:	4a14      	ldr	r2, [pc, #80]	; (8000450 <_sbrk+0x5c>)
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <_sbrk+0x60>)
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <_sbrk+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d102      	bne.n	8000416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <_sbrk+0x64>)
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <_sbrk+0x68>)
 8000414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <_sbrk+0x64>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	693a      	ldr	r2, [r7, #16]
 8000420:	429a      	cmp	r2, r3
 8000422:	d207      	bcs.n	8000434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000424:	f007 faac 	bl	8007980 <__errno>
 8000428:	4603      	mov	r3, r0
 800042a:	220c      	movs	r2, #12
 800042c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800042e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000432:	e009      	b.n	8000448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <_sbrk+0x64>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <_sbrk+0x64>)
 8000444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000446:	68fb      	ldr	r3, [r7, #12]
}
 8000448:	4618      	mov	r0, r3
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20005000 	.word	0x20005000
 8000454:	00000400 	.word	0x00000400
 8000458:	200001e8 	.word	0x200001e8
 800045c:	20001320 	.word	0x20001320

08000460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800046c:	f7ff fff8 	bl	8000460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480b      	ldr	r0, [pc, #44]	; (80004a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000472:	490c      	ldr	r1, [pc, #48]	; (80004a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000474:	4a0c      	ldr	r2, [pc, #48]	; (80004a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a09      	ldr	r2, [pc, #36]	; (80004ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000488:	4c09      	ldr	r4, [pc, #36]	; (80004b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000496:	f007 fa79 	bl	800798c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049a:	f007 fa25 	bl	80078e8 <main>
  bx lr
 800049e:	4770      	bx	lr
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80004a8:	08008368 	.word	0x08008368
  ldr r2, =_sbss
 80004ac:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80004b0:	2000131c 	.word	0x2000131c

080004b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC1_2_IRQHandler>
	...

080004b8 <uartInit>:
extern uint8_t cdcRead(void);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);


bool uartInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  for (int i = 0; i < UART_MAX_CH; i++)
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	e007      	b.n	80004d4 <uartInit+0x1c>
  {
    is_open[i] = false;
 80004c4:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <uartInit+0x30>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < UART_MAX_CH; i++)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3301      	adds	r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	ddf4      	ble.n	80004c4 <uartInit+0xc>
  }

  return true;
 80004da:	2301      	movs	r3, #1
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	200001ec 	.word	0x200001ec

080004ec <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d106      	bne.n	8000510 <uartOpen+0x24>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <uartOpen+0x30>)
 8000506:	2101      	movs	r1, #1
 8000508:	54d1      	strb	r1, [r2, r3]
      ret = true;
 800050a:	2301      	movs	r3, #1
 800050c:	73fb      	strb	r3, [r7, #15]
      break;
 800050e:	bf00      	nop
  }

  return ret;
 8000510:	7bfb      	ldrb	r3, [r7, #15]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	200001ec 	.word	0x200001ec

08000520 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
 uint32_t ret = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]

 switch(ch)
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d103      	bne.n	800053c <uartAvailable+0x1c>
 {
   case _DEF_UART1:
     ret = cdcAvailable();
 8000534:	f006 fcd6 	bl	8006ee4 <cdcAvailable>
 8000538:	60f8      	str	r0, [r7, #12]
     break;
 800053a:	bf00      	nop
 }

 return ret;
 800053c:	68fb      	ldr	r3, [r7, #12]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b084      	sub	sp, #16
 800054a:	af00      	add	r7, sp, #0
 800054c:	4603      	mov	r3, r0
 800054e:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d104      	bne.n	8000564 <uartRead+0x1e>
  {
    case _DEF_UART1:
      ret = cdcRead();
 800055a:	f006 fcfd 	bl	8006f58 <cdcRead>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
      break;
 8000562:	bf00      	nop
  }

  return ret;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b086      	sub	sp, #24
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
 800057a:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]

  switch(ch)
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d104      	bne.n	8000590 <uartWrite+0x22>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	68b8      	ldr	r0, [r7, #8]
 800058a:	f006 fd07 	bl	8006f9c <cdcWrite>
 800058e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8000590:	697b      	ldr	r3, [r7, #20]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800059a:	b40e      	push	{r1, r2, r3}
 800059c:	b580      	push	{r7, lr}
 800059e:	b0c7      	sub	sp, #284	; 0x11c
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4602      	mov	r2, r0
 80005a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80005a8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80005ac:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80005ae:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80005b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80005b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005ba:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80005bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80005c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005c4:	f107 0010 	add.w	r0, r7, #16
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80005ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d2:	f007 f9bf 	bl	8007954 <vsniprintf>
 80005d6:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80005da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80005de:	f107 0110 	add.w	r1, r7, #16
 80005e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80005e6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffbe 	bl	800056e <uartWrite>
 80005f2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 80005f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000600:	46bd      	mov	sp, r7
 8000602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000606:	b003      	add	sp, #12
 8000608:	4770      	bx	lr

0800060a <hwInit>:


#include "hw.h"

void hwInit(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
  bspInit();
 800060e:	f7ff fddb 	bl	80001c8 <bspInit>
  uartInit();
 8000612:	f7ff ff51 	bl	80004b8 <uartInit>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_Init+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_Init+0x28>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f923 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	200f      	movs	r0, #15
 8000634:	f000 f808 	bl	8000648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000638:	f7ff fe78 	bl	800032c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_InitTick+0x54>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_InitTick+0x58>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000662:	fbb2 f3f3 	udiv	r3, r2, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f93b 	bl	80008e2 <HAL_SYSTICK_Config>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e00e      	b.n	8000694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d80a      	bhi.n	8000692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000684:	f000 f903 	bl	800088e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_InitTick+0x5c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	e000      	b.n	8000694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_IncTick+0x1c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x20>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <HAL_IncTick+0x20>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000008 	.word	0x20000008
 80006c8:	200001f0 	.word	0x200001f0

080006cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return uwTick;
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <HAL_GetTick+0x10>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	200001f0 	.word	0x200001f0

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4906      	ldr	r1, [pc, #24]	; (8000778 <__NVIC_EnableIRQ+0x34>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000858:	f7ff ff90 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff2d 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff42 	bl	8000728 <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff90 	bl	80007d0 <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff5f 	bl	800077c <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff35 	bl	8000744 <__NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffa2 	bl	8000834 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090e:	e169      	b.n	8000be4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000910:	2201      	movs	r2, #1
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	f040 8158 	bne.w	8000bde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	4a9a      	ldr	r2, [pc, #616]	; (8000b9c <HAL_GPIO_Init+0x2a0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d05e      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000938:	4a98      	ldr	r2, [pc, #608]	; (8000b9c <HAL_GPIO_Init+0x2a0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d875      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 800093e:	4a98      	ldr	r2, [pc, #608]	; (8000ba0 <HAL_GPIO_Init+0x2a4>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d058      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000944:	4a96      	ldr	r2, [pc, #600]	; (8000ba0 <HAL_GPIO_Init+0x2a4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d86f      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 800094a:	4a96      	ldr	r2, [pc, #600]	; (8000ba4 <HAL_GPIO_Init+0x2a8>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d052      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000950:	4a94      	ldr	r2, [pc, #592]	; (8000ba4 <HAL_GPIO_Init+0x2a8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d869      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 8000956:	4a94      	ldr	r2, [pc, #592]	; (8000ba8 <HAL_GPIO_Init+0x2ac>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d04c      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 800095c:	4a92      	ldr	r2, [pc, #584]	; (8000ba8 <HAL_GPIO_Init+0x2ac>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d863      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 8000962:	4a92      	ldr	r2, [pc, #584]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d046      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000968:	4a90      	ldr	r2, [pc, #576]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d85d      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 800096e:	2b12      	cmp	r3, #18
 8000970:	d82a      	bhi.n	80009c8 <HAL_GPIO_Init+0xcc>
 8000972:	2b12      	cmp	r3, #18
 8000974:	d859      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 8000976:	a201      	add	r2, pc, #4	; (adr r2, 800097c <HAL_GPIO_Init+0x80>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	080009f7 	.word	0x080009f7
 8000980:	080009d1 	.word	0x080009d1
 8000984:	080009e3 	.word	0x080009e3
 8000988:	08000a25 	.word	0x08000a25
 800098c:	08000a2b 	.word	0x08000a2b
 8000990:	08000a2b 	.word	0x08000a2b
 8000994:	08000a2b 	.word	0x08000a2b
 8000998:	08000a2b 	.word	0x08000a2b
 800099c:	08000a2b 	.word	0x08000a2b
 80009a0:	08000a2b 	.word	0x08000a2b
 80009a4:	08000a2b 	.word	0x08000a2b
 80009a8:	08000a2b 	.word	0x08000a2b
 80009ac:	08000a2b 	.word	0x08000a2b
 80009b0:	08000a2b 	.word	0x08000a2b
 80009b4:	08000a2b 	.word	0x08000a2b
 80009b8:	08000a2b 	.word	0x08000a2b
 80009bc:	08000a2b 	.word	0x08000a2b
 80009c0:	080009d9 	.word	0x080009d9
 80009c4:	080009ed 	.word	0x080009ed
 80009c8:	4a79      	ldr	r2, [pc, #484]	; (8000bb0 <HAL_GPIO_Init+0x2b4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d013      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ce:	e02c      	b.n	8000a2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	623b      	str	r3, [r7, #32]
          break;
 80009d6:	e029      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	3304      	adds	r3, #4
 80009de:	623b      	str	r3, [r7, #32]
          break;
 80009e0:	e024      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	3308      	adds	r3, #8
 80009e8:	623b      	str	r3, [r7, #32]
          break;
 80009ea:	e01f      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	330c      	adds	r3, #12
 80009f2:	623b      	str	r3, [r7, #32]
          break;
 80009f4:	e01a      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009fe:	2304      	movs	r3, #4
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e013      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d105      	bne.n	8000a18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	611a      	str	r2, [r3, #16]
          break;
 8000a16:	e009      	b.n	8000a2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	615a      	str	r2, [r3, #20]
          break;
 8000a22:	e003      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
          break;
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          break;
 8000a2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	2bff      	cmp	r3, #255	; 0xff
 8000a30:	d801      	bhi.n	8000a36 <HAL_GPIO_Init+0x13a>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	e001      	b.n	8000a3a <HAL_GPIO_Init+0x13e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	2bff      	cmp	r3, #255	; 0xff
 8000a40:	d802      	bhi.n	8000a48 <HAL_GPIO_Init+0x14c>
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	e002      	b.n	8000a4e <HAL_GPIO_Init+0x152>
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	3b08      	subs	r3, #8
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	210f      	movs	r1, #15
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	401a      	ands	r2, r3
 8000a60:	6a39      	ldr	r1, [r7, #32]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 80b1 	beq.w	8000bde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a94:	4a48      	ldr	r2, [pc, #288]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	f003 0303 	and.w	r3, r3, #3
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	220f      	movs	r2, #15
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <HAL_GPIO_Init+0x2c0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d013      	beq.n	8000ae8 <HAL_GPIO_Init+0x1ec>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a3f      	ldr	r2, [pc, #252]	; (8000bc0 <HAL_GPIO_Init+0x2c4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d00d      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e8>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a3e      	ldr	r2, [pc, #248]	; (8000bc4 <HAL_GPIO_Init+0x2c8>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d007      	beq.n	8000ae0 <HAL_GPIO_Init+0x1e4>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <HAL_GPIO_Init+0x2cc>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d101      	bne.n	8000adc <HAL_GPIO_Init+0x1e0>
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e006      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000adc:	2304      	movs	r3, #4
 8000ade:	e004      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e002      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e000      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aec:	f002 0203 	and.w	r2, r2, #3
 8000af0:	0092      	lsls	r2, r2, #2
 8000af2:	4093      	lsls	r3, r2
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000afa:	492f      	ldr	r1, [pc, #188]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3302      	adds	r3, #2
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d006      	beq.n	8000b22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	492c      	ldr	r1, [pc, #176]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	608b      	str	r3, [r1, #8]
 8000b20:	e006      	b.n	8000b30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	4928      	ldr	r1, [pc, #160]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	4922      	ldr	r1, [pc, #136]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	60cb      	str	r3, [r1, #12]
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	491e      	ldr	r1, [pc, #120]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b54:	4013      	ands	r3, r2
 8000b56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	4918      	ldr	r1, [pc, #96]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	604b      	str	r3, [r1, #4]
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	4914      	ldr	r1, [pc, #80]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d021      	beq.n	8000bd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	490e      	ldr	r1, [pc, #56]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
 8000b98:	e021      	b.n	8000bde <HAL_GPIO_Init+0x2e2>
 8000b9a:	bf00      	nop
 8000b9c:	10320000 	.word	0x10320000
 8000ba0:	10310000 	.word	0x10310000
 8000ba4:	10220000 	.word	0x10220000
 8000ba8:	10210000 	.word	0x10210000
 8000bac:	10120000 	.word	0x10120000
 8000bb0:	10110000 	.word	0x10110000
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	40010800 	.word	0x40010800
 8000bc0:	40010c00 	.word	0x40010c00
 8000bc4:	40011000 	.word	0x40011000
 8000bc8:	40011400 	.word	0x40011400
 8000bcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_GPIO_Init+0x304>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	4909      	ldr	r1, [pc, #36]	; (8000c00 <HAL_GPIO_Init+0x304>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	3301      	adds	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	fa22 f303 	lsr.w	r3, r2, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f47f ae8e 	bne.w	8000910 <HAL_GPIO_Init+0x14>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	372c      	adds	r7, #44	; 0x2c
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40010400 	.word	0x40010400

08000c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c20:	e003      	b.n	8000c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	041a      	lsls	r2, r3, #16
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	611a      	str	r2, [r3, #16]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43d9      	mvns	r1, r3
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	400b      	ands	r3, r1
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	611a      	str	r2, [r3, #16]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c68:	b08b      	sub	sp, #44	; 0x2c
 8000c6a:	af06      	add	r7, sp, #24
 8000c6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e0f1      	b.n	8000e5c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d106      	bne.n	8000c92 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f006 fb81 	bl	8007394 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2203      	movs	r2, #3
 8000c96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fa0a 	bl	80030b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	687e      	ldr	r6, [r7, #4]
 8000cac:	466d      	mov	r5, sp
 8000cae:	f106 0410 	add.w	r4, r6, #16
 8000cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	602b      	str	r3, [r5, #0]
 8000cba:	1d33      	adds	r3, r6, #4
 8000cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cbe:	6838      	ldr	r0, [r7, #0]
 8000cc0:	f002 f9d4 	bl	800306c <USB_CoreInit>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d005      	beq.n	8000cd6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2202      	movs	r2, #2
 8000cce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e0c2      	b.n	8000e5c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fa05 	bl	80030ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e040      	b.n	8000d6a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	7bfa      	ldrb	r2, [r7, #15]
 8000d10:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	440b      	add	r3, r1
 8000d22:	3303      	adds	r3, #3
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	440b      	add	r3, r1
 8000d36:	3338      	adds	r3, #56	; 0x38
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	333c      	adds	r3, #60	; 0x3c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	440b      	add	r3, r1
 8000d5e:	3340      	adds	r3, #64	; 0x40
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	3301      	adds	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d3b9      	bcc.n	8000ce8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e044      	b.n	8000e04 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	440b      	add	r3, r1
 8000d88:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000da6:	7bfa      	ldrb	r2, [r7, #15]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dbc:	7bfa      	ldrb	r2, [r7, #15]
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	440b      	add	r3, r1
 8000dca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dd2:	7bfa      	ldrb	r2, [r7, #15]
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	440b      	add	r3, r1
 8000de0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	440b      	add	r3, r1
 8000df6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	3301      	adds	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d3b5      	bcc.n	8000d7a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	687e      	ldr	r6, [r7, #4]
 8000e16:	466d      	mov	r5, sp
 8000e18:	f106 0410 	add.w	r4, r6, #16
 8000e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	602b      	str	r3, [r5, #0]
 8000e24:	1d33      	adds	r3, r6, #4
 8000e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e28:	6838      	ldr	r0, [r7, #0]
 8000e2a:	f002 f96b 	bl	8003104 <USB_DevInit>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2202      	movs	r2, #2
 8000e38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e00d      	b.n	8000e5c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f004 fbec 	bl	8005632 <USB_DevDisconnect>

  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d101      	bne.n	8000e7a <HAL_PCD_Start+0x16>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e016      	b.n	8000ea8 <HAL_PCD_Start+0x44>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 f900 	bl	800308c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f006 fcf3 	bl	800787a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 fbc0 	bl	800561e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fbc2 	bl	8005646 <USB_ReadInterrupts>
 8000ec2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fb1b 	bl	800150a <PCD_EP_ISR_Handler>

    return;
 8000ed4:	e119      	b.n	800110a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d013      	beq.n	8000f08 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f006 fac6 	bl	800748a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000efe:	2100      	movs	r1, #0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f905 	bl	8001110 <HAL_PCD_SetAddress>

    return;
 8000f06:	e100      	b.n	800110a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00c      	beq.n	8000f2c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f24:	b292      	uxth	r2, r2
 8000f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f2a:	e0ee      	b.n	800110a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f48:	b292      	uxth	r2, r2
 8000f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f4e:	e0dc      	b.n	800110a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d027      	beq.n	8000faa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0204 	bic.w	r2, r2, #4
 8000f6c:	b292      	uxth	r2, r2
 8000f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0208 	bic.w	r2, r2, #8
 8000f84:	b292      	uxth	r2, r2
 8000f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f006 fab6 	bl	80074fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000fa8:	e0af      	b.n	800110a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 8083 	beq.w	80010bc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	77fb      	strb	r3, [r7, #31]
 8000fba:	e010      	b.n	8000fde <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	441a      	add	r2, r3
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	8812      	ldrh	r2, [r2, #0]
 8000fcc:	b292      	uxth	r2, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	3320      	adds	r3, #32
 8000fd2:	443b      	add	r3, r7
 8000fd4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	77fb      	strb	r3, [r7, #31]
 8000fde:	7ffb      	ldrb	r3, [r7, #31]
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	d9eb      	bls.n	8000fbc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	b292      	uxth	r2, r2
 8000ff8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001004:	b29a      	uxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0201 	bic.w	r2, r2, #1
 800100e:	b292      	uxth	r2, r2
 8001010:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001014:	bf00      	nop
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800101e:	b29b      	uxth	r3, r3
 8001020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f6      	beq.n	8001016 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800103a:	b292      	uxth	r2, r2
 800103c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001040:	2300      	movs	r3, #0
 8001042:	77fb      	strb	r3, [r7, #31]
 8001044:	e00f      	b.n	8001066 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001046:	7ffb      	ldrb	r3, [r7, #31]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	4611      	mov	r1, r2
 800104e:	7ffa      	ldrb	r2, [r7, #31]
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	440a      	add	r2, r1
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	3320      	adds	r3, #32
 8001058:	443b      	add	r3, r7
 800105a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800105e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001060:	7ffb      	ldrb	r3, [r7, #31]
 8001062:	3301      	adds	r3, #1
 8001064:	77fb      	strb	r3, [r7, #31]
 8001066:	7ffb      	ldrb	r3, [r7, #31]
 8001068:	2b07      	cmp	r3, #7
 800106a:	d9ec      	bls.n	8001046 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001074:	b29a      	uxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0208 	orr.w	r2, r2, #8
 800107e:	b292      	uxth	r2, r2
 8001080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001096:	b292      	uxth	r2, r2
 8001098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0204 	orr.w	r2, r2, #4
 80010ae:	b292      	uxth	r2, r2
 80010b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f006 fa07 	bl	80074c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010ba:	e026      	b.n	800110a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00f      	beq.n	80010e6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010d8:	b292      	uxth	r2, r2
 80010da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f006 f9c5 	bl	800746e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010e4:	e011      	b.n	800110a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00c      	beq.n	800110a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001102:	b292      	uxth	r2, r2
 8001104:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001108:	bf00      	nop
  }
}
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_PCD_SetAddress+0x1a>
 8001126:	2302      	movs	r3, #2
 8001128:	e013      	b.n	8001152 <HAL_PCD_SetAddress+0x42>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	78fa      	ldrb	r2, [r7, #3]
 8001136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	78fa      	ldrb	r2, [r7, #3]
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f004 fa58 	bl	80055f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	4608      	mov	r0, r1
 8001164:	4611      	mov	r1, r2
 8001166:	461a      	mov	r2, r3
 8001168:	4603      	mov	r3, r0
 800116a:	70fb      	strb	r3, [r7, #3]
 800116c:	460b      	mov	r3, r1
 800116e:	803b      	strh	r3, [r7, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800117c:	2b00      	cmp	r3, #0
 800117e:	da0e      	bge.n	800119e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2201      	movs	r2, #1
 800119a:	705a      	strb	r2, [r3, #1]
 800119c:	e00e      	b.n	80011bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	f003 0207 	and.w	r2, r3, #7
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011c8:	883a      	ldrh	r2, [r7, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	78ba      	ldrb	r2, [r7, #2]
 80011d2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011d4:	78bb      	ldrb	r3, [r7, #2]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d102      	bne.n	80011e0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <HAL_PCD_EP_Open+0x94>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e00e      	b.n	800120c <HAL_PCD_EP_Open+0xb2>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68f9      	ldr	r1, [r7, #12]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 ffa1 	bl	8003144 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800120a:	7afb      	ldrb	r3, [r7, #11]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da0e      	bge.n	8001246 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	705a      	strb	r2, [r3, #1]
 8001244:	e00e      	b.n	8001264 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	f003 0207 	and.w	r2, r3, #7
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	b2da      	uxtb	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_PCD_EP_Close+0x6a>
 800127a:	2302      	movs	r3, #2
 800127c:	e00e      	b.n	800129c <HAL_PCD_EP_Close+0x88>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68f9      	ldr	r1, [r7, #12]
 800128c:	4618      	mov	r0, r3
 800128e:	f002 fb19 	bl	80038c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	460b      	mov	r3, r1
 80012b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	f003 0207 	and.w	r2, r3, #7
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2200      	movs	r2, #0
 80012e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6979      	ldr	r1, [r7, #20]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fcd0 	bl	8003c9c <USB_EPStartXfer>

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	f003 0207 	and.w	r2, r3, #7
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001328:	681b      	ldr	r3, [r3, #0]
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	460b      	mov	r3, r1
 8001342:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2201      	movs	r2, #1
 800137e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001380:	7afb      	ldrb	r3, [r7, #11]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	b2da      	uxtb	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6979      	ldr	r1, [r7, #20]
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fc82 	bl	8003c9c <USB_EPStartXfer>

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	f003 0207 	and.w	r2, r3, #7
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d901      	bls.n	80013c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e04c      	b.n	800145a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	da0e      	bge.n	80013e6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	705a      	strb	r2, [r3, #1]
 80013e4:	e00c      	b.n	8001400 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013e6:	78fa      	ldrb	r2, [r7, #3]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	b2da      	uxtb	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_PCD_EP_SetStall+0x7e>
 800141c:	2302      	movs	r3, #2
 800141e:	e01c      	b.n	800145a <HAL_PCD_EP_SetStall+0xb8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68f9      	ldr	r1, [r7, #12]
 800142e:	4618      	mov	r0, r3
 8001430:	f003 ffe5 	bl	80053fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2b00      	cmp	r3, #0
 800143c:	d108      	bne.n	8001450 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001448:	4619      	mov	r1, r3
 800144a:	4610      	mov	r0, r2
 800144c:	f004 f90a 	bl	8005664 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	f003 020f 	and.w	r2, r3, #15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	d901      	bls.n	8001480 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e040      	b.n	8001502 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da0e      	bge.n	80014a6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2201      	movs	r2, #1
 80014a2:	705a      	strb	r2, [r3, #1]
 80014a4:	e00e      	b.n	80014c4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	f003 0207 	and.w	r2, r3, #7
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_PCD_EP_ClrStall+0x82>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e00e      	b.n	8001502 <HAL_PCD_EP_ClrStall+0xa0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68f9      	ldr	r1, [r7, #12]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 ffd3 	bl	800549e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b096      	sub	sp, #88	; 0x58
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001512:	e3bf      	b.n	8001c94 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800151c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001520:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800152e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 8179 	bne.w	800182a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	d152      	bne.n	80015ea <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001564:	b29b      	uxth	r3, r3
 8001566:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3328      	adds	r3, #40	; 0x28
 800156c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	3302      	adds	r3, #2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001598:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800159a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	441a      	add	r2, r3
 80015a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015a8:	2100      	movs	r1, #0
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f005 ff45 	bl	800743a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 836b 	beq.w	8001c94 <PCD_EP_ISR_Handler+0x78a>
 80015be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 8366 	bne.w	8001c94 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b292      	uxth	r2, r2
 80015dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80015e8:	e354      	b.n	8001c94 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015f0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001604:	2b00      	cmp	r3, #0
 8001606:	d034      	beq.n	8001672 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001610:	b29b      	uxth	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	3306      	adds	r3, #6
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001632:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800163e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001640:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001644:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001646:	b29b      	uxth	r3, r3
 8001648:	f004 f85c 	bl	8005704 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	b29a      	uxth	r2, r3
 8001654:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001658:	4013      	ands	r3, r2
 800165a:	823b      	strh	r3, [r7, #16]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	8a3a      	ldrh	r2, [r7, #16]
 8001662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001666:	b292      	uxth	r2, r2
 8001668:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f005 feb8 	bl	80073e0 <HAL_PCD_SetupStageCallback>
 8001670:	e310      	b.n	8001c94 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001672:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001676:	2b00      	cmp	r3, #0
 8001678:	f280 830c 	bge.w	8001c94 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29a      	uxth	r2, r3
 8001684:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001688:	4013      	ands	r3, r2
 800168a:	83fb      	strh	r3, [r7, #30]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	8bfa      	ldrh	r2, [r7, #30]
 8001692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001696:	b292      	uxth	r2, r2
 8001698:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	3306      	adds	r3, #6
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d019      	beq.n	8001702 <PCD_EP_ISR_Handler+0x1f8>
 80016ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016dc:	6959      	ldr	r1, [r3, #20]
 80016de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f004 f80c 	bl	8005704 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80016ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	441a      	add	r2, r3
 80016f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016fa:	2100      	movs	r1, #0
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f005 fe81 	bl	8007404 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800170c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 82bd 	bne.w	8001c94 <PCD_EP_ISR_Handler+0x78a>
 800171a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800171e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001726:	f000 82b5 	beq.w	8001c94 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001738:	b29b      	uxth	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	4413      	add	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001754:	b29a      	uxth	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	801a      	strh	r2, [r3, #0]
 800175a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b3e      	cmp	r3, #62	; 0x3e
 8001760:	d91d      	bls.n	800179e <PCD_EP_ISR_Handler+0x294>
 8001762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	647b      	str	r3, [r7, #68]	; 0x44
 800176a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <PCD_EP_ISR_Handler+0x272>
 8001776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001778:	3b01      	subs	r3, #1
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b29a      	uxth	r2, r3
 8001782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001784:	b29b      	uxth	r3, r3
 8001786:	029b      	lsls	r3, r3, #10
 8001788:	b29b      	uxth	r3, r3
 800178a:	4313      	orrs	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001796:	b29a      	uxth	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	801a      	strh	r2, [r3, #0]
 800179c:	e026      	b.n	80017ec <PCD_EP_ISR_Handler+0x2e2>
 800179e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10a      	bne.n	80017bc <PCD_EP_ISR_Handler+0x2b2>
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	e017      	b.n	80017ec <PCD_EP_ISR_Handler+0x2e2>
 80017bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	647b      	str	r3, [r7, #68]	; 0x44
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <PCD_EP_ISR_Handler+0x2cc>
 80017d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d2:	3301      	adds	r3, #1
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017de:	b29b      	uxth	r3, r3
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fc:	827b      	strh	r3, [r7, #18]
 80017fe:	8a7b      	ldrh	r3, [r7, #18]
 8001800:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001804:	827b      	strh	r3, [r7, #18]
 8001806:	8a7b      	ldrh	r3, [r7, #18]
 8001808:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800180c:	827b      	strh	r3, [r7, #18]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	8a7b      	ldrh	r3, [r7, #18]
 8001814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800181c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001824:	b29b      	uxth	r3, r3
 8001826:	8013      	strh	r3, [r2, #0]
 8001828:	e234      	b.n	8001c94 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800183e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001842:	2b00      	cmp	r3, #0
 8001844:	f280 80fc 	bge.w	8001a40 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29a      	uxth	r2, r3
 800185a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800185e:	4013      	ands	r3, r2
 8001860:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800187a:	b292      	uxth	r2, r2
 800187c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800187e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001896:	7b1b      	ldrb	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d125      	bne.n	80018e8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	3306      	adds	r3, #6
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80018c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8092 	beq.w	80019f6 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d8:	6959      	ldr	r1, [r3, #20]
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	88da      	ldrh	r2, [r3, #6]
 80018de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80018e2:	f003 ff0f 	bl	8005704 <USB_ReadPMA>
 80018e6:	e086      	b.n	80019f6 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ea:	78db      	ldrb	r3, [r3, #3]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d10a      	bne.n	8001906 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80018f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018f4:	461a      	mov	r2, r3
 80018f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f9d9 	bl	8001cb0 <HAL_PCD_EP_DB_Receive>
 80018fe:	4603      	mov	r3, r0
 8001900:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001904:	e077      	b.n	80019f6 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800191c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001920:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	441a      	add	r2, r3
 8001932:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800193a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800193e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001942:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001946:	b29b      	uxth	r3, r3
 8001948:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d024      	beq.n	80019ae <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800196c:	b29b      	uxth	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	3302      	adds	r3, #2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	4413      	add	r3, r2
 8001982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800198c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001990:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001994:	2b00      	cmp	r3, #0
 8001996:	d02e      	beq.n	80019f6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800199e:	6959      	ldr	r1, [r3, #20]
 80019a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a2:	891a      	ldrh	r2, [r3, #8]
 80019a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019a8:	f003 feac 	bl	8005704 <USB_ReadPMA>
 80019ac:	e023      	b.n	80019f6 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	3306      	adds	r3, #6
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80019da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e8:	6959      	ldr	r1, [r3, #20]
 80019ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ec:	895a      	ldrh	r2, [r3, #10]
 80019ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019f2:	f003 fe87 	bl	8005704 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019fe:	441a      	add	r2, r3
 8001a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a0c:	441a      	add	r2, r3
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a10:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <PCD_EP_ISR_Handler+0x51c>
 8001a1a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d206      	bcs.n	8001a34 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f005 fce9 	bl	8007404 <HAL_PCD_DataOutStageCallback>
 8001a32:	e005      	b.n	8001a40 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 f92e 	bl	8003c9c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8123 	beq.w	8001c94 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a4e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	441a      	add	r2, r3
 8001a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa0:	78db      	ldrb	r3, [r3, #3]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	f040 80a2 	bne.w	8001bec <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab0:	7b1b      	ldrb	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8093 	beq.w	8001bde <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ab8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d046      	beq.n	8001b52 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac6:	785b      	ldrb	r3, [r3, #1]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d126      	bne.n	8001b1a <PCD_EP_ISR_Handler+0x610>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	4413      	add	r3, r2
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	011a      	lsls	r2, r3, #4
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	4413      	add	r3, r2
 8001aee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001af2:	623b      	str	r3, [r7, #32]
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	801a      	strh	r2, [r3, #0]
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	801a      	strh	r2, [r3, #0]
 8001b18:	e061      	b.n	8001bde <PCD_EP_ISR_Handler+0x6d4>
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1c:	785b      	ldrb	r3, [r3, #1]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d15d      	bne.n	8001bde <PCD_EP_ISR_Handler+0x6d4>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b36:	4413      	add	r3, r2
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	011a      	lsls	r2, r3, #4
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	4413      	add	r3, r2
 8001b44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
 8001b50:	e045      	b.n	8001bde <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5a:	785b      	ldrb	r3, [r3, #1]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d126      	bne.n	8001bae <PCD_EP_ISR_Handler+0x6a4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b74:	4413      	add	r3, r2
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
 8001b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	011a      	lsls	r2, r3, #4
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b80:	4413      	add	r3, r2
 8001b82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
 8001b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	801a      	strh	r2, [r3, #0]
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	801a      	strh	r2, [r3, #0]
 8001bac:	e017      	b.n	8001bde <PCD_EP_ISR_Handler+0x6d4>
 8001bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb0:	785b      	ldrb	r3, [r3, #1]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d113      	bne.n	8001bde <PCD_EP_ISR_Handler+0x6d4>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc4:	4413      	add	r3, r2
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	011a      	lsls	r2, r3, #4
 8001bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bda:	2200      	movs	r2, #0
 8001bdc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	4619      	mov	r1, r3
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f005 fc28 	bl	800743a <HAL_PCD_DataInStageCallback>
 8001bea:	e053      	b.n	8001c94 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001bec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d146      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d907      	bls.n	8001c40 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c38:	1ad2      	subs	r2, r2, r3
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	619a      	str	r2, [r3, #24]
 8001c3e:	e002      	b.n	8001c46 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f005 fbf0 	bl	800743a <HAL_PCD_DataInStageCallback>
 8001c5a:	e01b      	b.n	8001c94 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c64:	441a      	add	r2, r3
 8001c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c68:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c72:	441a      	add	r2, r3
 8001c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c76:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 f80c 	bl	8003c9c <USB_EPStartXfer>
 8001c84:	e006      	b.n	8001c94 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f91b 	bl	8001eca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f6ff ac37 	blt.w	8001514 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3758      	adds	r7, #88	; 0x58
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d07e      	beq.n	8001dc6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	8b7b      	ldrh	r3, [r7, #26]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d306      	bcc.n	8001d0a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	699a      	ldr	r2, [r3, #24]
 8001d00:	8b7b      	ldrh	r3, [r7, #26]
 8001d02:	1ad2      	subs	r2, r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	619a      	str	r2, [r3, #24]
 8001d08:	e002      	b.n	8001d10 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d123      	bne.n	8001d60 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d32:	833b      	strh	r3, [r7, #24]
 8001d34:	8b3b      	ldrh	r3, [r7, #24]
 8001d36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d3a:	833b      	strh	r3, [r7, #24]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	441a      	add	r2, r3
 8001d4a:	8b3b      	ldrh	r3, [r7, #24]
 8001d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01f      	beq.n	8001daa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d84:	82fb      	strh	r3, [r7, #22]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	441a      	add	r2, r3
 8001d94:	8afb      	ldrh	r3, [r7, #22]
 8001d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001daa:	8b7b      	ldrh	r3, [r7, #26]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8087 	beq.w	8001ec0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	6959      	ldr	r1, [r3, #20]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	891a      	ldrh	r2, [r3, #8]
 8001dbe:	8b7b      	ldrh	r3, [r7, #26]
 8001dc0:	f003 fca0 	bl	8005704 <USB_ReadPMA>
 8001dc4:	e07c      	b.n	8001ec0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3306      	adds	r3, #6
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	8b7b      	ldrh	r3, [r7, #26]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d306      	bcc.n	8001e08 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	8b7b      	ldrh	r3, [r7, #26]
 8001e00:	1ad2      	subs	r2, r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	619a      	str	r2, [r3, #24]
 8001e06:	e002      	b.n	8001e0e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d123      	bne.n	8001e5e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e30:	83fb      	strh	r3, [r7, #30]
 8001e32:	8bfb      	ldrh	r3, [r7, #30]
 8001e34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e38:	83fb      	strh	r3, [r7, #30]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	441a      	add	r2, r3
 8001e48:	8bfb      	ldrh	r3, [r7, #30]
 8001e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d11f      	bne.n	8001ea8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e82:	83bb      	strh	r3, [r7, #28]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	441a      	add	r2, r3
 8001e92:	8bbb      	ldrh	r3, [r7, #28]
 8001e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ea8:	8b7b      	ldrh	r3, [r7, #26]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	6959      	ldr	r1, [r3, #20]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	895a      	ldrh	r2, [r3, #10]
 8001eba:	8b7b      	ldrh	r3, [r7, #26]
 8001ebc:	f003 fc22 	bl	8005704 <USB_ReadPMA>
    }
  }

  return count;
 8001ec0:	8b7b      	ldrh	r3, [r7, #26]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b0a4      	sub	sp, #144	; 0x90
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 81dd 	beq.w	800229e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d907      	bls.n	8001f2c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	699a      	ldr	r2, [r3, #24]
 8001f20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f24:	1ad2      	subs	r2, r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	619a      	str	r2, [r3, #24]
 8001f2a:	e002      	b.n	8001f32 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 80b9 	bne.w	80020ae <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d126      	bne.n	8001f92 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	4413      	add	r3, r2
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	011a      	lsls	r2, r3, #4
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	4413      	add	r3, r2
 8001f66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	e01a      	b.n	8001fc8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	785b      	ldrb	r3, [r3, #1]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d116      	bne.n	8001fc8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fae:	4413      	add	r3, r2
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	011a      	lsls	r2, r3, #4
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fba:	4413      	add	r3, r2
 8001fbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d126      	bne.n	8002024 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4413      	add	r3, r2
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	011a      	lsls	r2, r3, #4
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002008:	b29a      	uxth	r2, r3
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201c:	b29a      	uxth	r2, r3
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	e017      	b.n	8002054 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	785b      	ldrb	r3, [r3, #1]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d113      	bne.n	8002054 <HAL_PCD_EP_DB_Transmit+0x18a>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	4413      	add	r3, r2
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	011a      	lsls	r2, r3, #4
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	4413      	add	r3, r2
 8002048:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800204c:	623b      	str	r3, [r7, #32]
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	2200      	movs	r2, #0
 8002052:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f005 f9ed 	bl	800743a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 82fc 	beq.w	8002664 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002086:	82fb      	strh	r3, [r7, #22]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	441a      	add	r2, r3
 8002096:	8afb      	ldrh	r3, [r7, #22]
 8002098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800209c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	8013      	strh	r3, [r2, #0]
 80020ac:	e2da      	b.n	8002664 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d021      	beq.n	80020fc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	441a      	add	r2, r3
 80020e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80020e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 82ae 	bne.w	8002664 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002110:	441a      	add	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800211e:	441a      	add	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	429a      	cmp	r2, r3
 800212e:	d30b      	bcc.n	8002148 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002140:	1ad2      	subs	r2, r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	621a      	str	r2, [r3, #32]
 8002146:	e017      	b.n	8002178 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d108      	bne.n	8002162 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002150:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002160:	e00a      	b.n	8002178 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	785b      	ldrb	r3, [r3, #1]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d165      	bne.n	800224c <HAL_PCD_EP_DB_Transmit+0x382>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002194:	4413      	add	r3, r2
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	011a      	lsls	r2, r3, #4
 800219e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a0:	4413      	add	r3, r2
 80021a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021bc:	2b3e      	cmp	r3, #62	; 0x3e
 80021be:	d91d      	bls.n	80021fc <HAL_PCD_EP_DB_Transmit+0x332>
 80021c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80021c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <HAL_PCD_EP_DB_Transmit+0x310>
 80021d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d6:	3b01      	subs	r3, #1
 80021d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	e044      	b.n	8002286 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80021fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10a      	bne.n	800221a <HAL_PCD_EP_DB_Transmit+0x350>
 8002204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800220e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002212:	b29a      	uxth	r2, r3
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	801a      	strh	r2, [r3, #0]
 8002218:	e035      	b.n	8002286 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800221a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	64bb      	str	r3, [r7, #72]	; 0x48
 8002222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_PCD_EP_DB_Transmit+0x36a>
 800222e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002230:	3301      	adds	r3, #1
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
 8002234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b29a      	uxth	r2, r3
 800223a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800223c:	b29b      	uxth	r3, r3
 800223e:	029b      	lsls	r3, r3, #10
 8002240:	b29b      	uxth	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b29a      	uxth	r2, r3
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	e01c      	b.n	8002286 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d118      	bne.n	8002286 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002268:	4413      	add	r3, r2
 800226a:	647b      	str	r3, [r7, #68]	; 0x44
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	011a      	lsls	r2, r3, #4
 8002272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002274:	4413      	add	r3, r2
 8002276:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800227a:	643b      	str	r3, [r7, #64]	; 0x40
 800227c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002280:	b29a      	uxth	r2, r3
 8002282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002284:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6959      	ldr	r1, [r3, #20]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	891a      	ldrh	r2, [r3, #8]
 8002292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002296:	b29b      	uxth	r3, r3
 8002298:	f003 f9ef 	bl	800567a <USB_WritePMA>
 800229c:	e1e2      	b.n	8002664 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	3306      	adds	r3, #6
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d307      	bcc.n	80022e6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	619a      	str	r2, [r3, #24]
 80022e4:	e002      	b.n	80022ec <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 80c0 	bne.w	8002476 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	785b      	ldrb	r3, [r3, #1]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d126      	bne.n	800234c <HAL_PCD_EP_DB_Transmit+0x482>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002312:	4413      	add	r3, r2
 8002314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	011a      	lsls	r2, r3, #4
 800231c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800231e:	4413      	add	r3, r2
 8002320:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002324:	67bb      	str	r3, [r7, #120]	; 0x78
 8002326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	b29a      	uxth	r2, r3
 8002332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002344:	b29a      	uxth	r2, r3
 8002346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e01a      	b.n	8002382 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d116      	bne.n	8002382 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	667b      	str	r3, [r7, #100]	; 0x64
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002368:	4413      	add	r3, r2
 800236a:	667b      	str	r3, [r7, #100]	; 0x64
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	011a      	lsls	r2, r3, #4
 8002372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002374:	4413      	add	r3, r2
 8002376:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800237a:	663b      	str	r3, [r7, #96]	; 0x60
 800237c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800237e:	2200      	movs	r2, #0
 8002380:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	677b      	str	r3, [r7, #116]	; 0x74
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	785b      	ldrb	r3, [r3, #1]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d12b      	bne.n	80023e8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a4:	4413      	add	r3, r2
 80023a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	011a      	lsls	r2, r3, #4
 80023ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b0:	4413      	add	r3, r2
 80023b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023de:	b29a      	uxth	r2, r3
 80023e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e4:	801a      	strh	r2, [r3, #0]
 80023e6:	e017      	b.n	8002418 <HAL_PCD_EP_DB_Transmit+0x54e>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d113      	bne.n	8002418 <HAL_PCD_EP_DB_Transmit+0x54e>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fe:	4413      	add	r3, r2
 8002400:	677b      	str	r3, [r7, #116]	; 0x74
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	011a      	lsls	r2, r3, #4
 8002408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240a:	4413      	add	r3, r2
 800240c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002410:	673b      	str	r3, [r7, #112]	; 0x70
 8002412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002414:	2200      	movs	r2, #0
 8002416:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f005 f80b 	bl	800743a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 811a 	bne.w	8002664 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	441a      	add	r2, r3
 800245c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	b29b      	uxth	r3, r3
 8002472:	8013      	strh	r3, [r2, #0]
 8002474:	e0f6      	b.n	8002664 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d121      	bne.n	80024c4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	441a      	add	r2, r3
 80024ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	f040 80ca 	bne.w	8002664 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024d8:	441a      	add	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024e6:	441a      	add	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d30b      	bcc.n	8002510 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002508:	1ad2      	subs	r2, r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	621a      	str	r2, [r3, #32]
 800250e:	e017      	b.n	8002540 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d108      	bne.n	800252a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002518:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800251c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002528:	e00a      	b.n	8002540 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	657b      	str	r3, [r7, #84]	; 0x54
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d165      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0x750>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002562:	4413      	add	r3, r2
 8002564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	011a      	lsls	r2, r3, #4
 800256c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800256e:	4413      	add	r3, r2
 8002570:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002574:	65bb      	str	r3, [r7, #88]	; 0x58
 8002576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002580:	b29a      	uxth	r2, r3
 8002582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800258a:	2b3e      	cmp	r3, #62	; 0x3e
 800258c:	d91d      	bls.n	80025ca <HAL_PCD_EP_DB_Transmit+0x700>
 800258e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	66bb      	str	r3, [r7, #104]	; 0x68
 8002596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80025a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a4:	3b01      	subs	r3, #1
 80025a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80025a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c6:	801a      	strh	r2, [r3, #0]
 80025c8:	e041      	b.n	800264e <HAL_PCD_EP_DB_Transmit+0x784>
 80025ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <HAL_PCD_EP_DB_Transmit+0x71e>
 80025d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	e032      	b.n	800264e <HAL_PCD_EP_DB_Transmit+0x784>
 80025e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80025f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_PCD_EP_DB_Transmit+0x738>
 80025fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025fe:	3301      	adds	r3, #1
 8002600:	66bb      	str	r3, [r7, #104]	; 0x68
 8002602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29a      	uxth	r2, r3
 8002608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800260a:	b29b      	uxth	r3, r3
 800260c:	029b      	lsls	r3, r3, #10
 800260e:	b29b      	uxth	r3, r3
 8002610:	4313      	orrs	r3, r2
 8002612:	b29a      	uxth	r2, r3
 8002614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002616:	801a      	strh	r2, [r3, #0]
 8002618:	e019      	b.n	800264e <HAL_PCD_EP_DB_Transmit+0x784>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d115      	bne.n	800264e <HAL_PCD_EP_DB_Transmit+0x784>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002630:	4413      	add	r3, r2
 8002632:	657b      	str	r3, [r7, #84]	; 0x54
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	011a      	lsls	r2, r3, #4
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	4413      	add	r3, r2
 800263e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002642:	653b      	str	r3, [r7, #80]	; 0x50
 8002644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002648:	b29a      	uxth	r2, r3
 800264a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6959      	ldr	r1, [r3, #20]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	895a      	ldrh	r2, [r3, #10]
 800265a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800265e:	b29b      	uxth	r3, r3
 8002660:	f003 f80b 	bl	800567a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b29b      	uxth	r3, r3
 8002676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267e:	82bb      	strh	r3, [r7, #20]
 8002680:	8abb      	ldrh	r3, [r7, #20]
 8002682:	f083 0310 	eor.w	r3, r3, #16
 8002686:	82bb      	strh	r3, [r7, #20]
 8002688:	8abb      	ldrh	r3, [r7, #20]
 800268a:	f083 0320 	eor.w	r3, r3, #32
 800268e:	82bb      	strh	r3, [r7, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	441a      	add	r2, r3
 800269e:	8abb      	ldrh	r3, [r7, #20]
 80026a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3790      	adds	r7, #144	; 0x90
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80026be:	b480      	push	{r7}
 80026c0:	b087      	sub	sp, #28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
 80026cc:	4613      	mov	r3, r2
 80026ce:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026d0:	897b      	ldrh	r3, [r7, #10]
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026dc:	897b      	ldrh	r3, [r7, #10]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e009      	b.n	8002708 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026f4:	897a      	ldrh	r2, [r7, #10]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4413      	add	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002708:	893b      	ldrh	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d107      	bne.n	800271e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2200      	movs	r2, #0
 8002712:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	b29a      	uxth	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	80da      	strh	r2, [r3, #6]
 800271c:	e00b      	b.n	8002736 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2201      	movs	r2, #1
 8002722:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	b29a      	uxth	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0c1b      	lsrs	r3, r3, #16
 8002730:	b29a      	uxth	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e272      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8087 	beq.w	8002872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002764:	4b92      	ldr	r3, [pc, #584]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b04      	cmp	r3, #4
 800276e:	d00c      	beq.n	800278a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002770:	4b8f      	ldr	r3, [pc, #572]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b08      	cmp	r3, #8
 800277a:	d112      	bne.n	80027a2 <HAL_RCC_OscConfig+0x5e>
 800277c:	4b8c      	ldr	r3, [pc, #560]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002788:	d10b      	bne.n	80027a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278a:	4b89      	ldr	r3, [pc, #548]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d06c      	beq.n	8002870 <HAL_RCC_OscConfig+0x12c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d168      	bne.n	8002870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e24c      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x76>
 80027ac:	4b80      	ldr	r3, [pc, #512]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a7f      	ldr	r2, [pc, #508]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	e02e      	b.n	8002818 <HAL_RCC_OscConfig+0xd4>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x98>
 80027c2:	4b7b      	ldr	r3, [pc, #492]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7a      	ldr	r2, [pc, #488]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b78      	ldr	r3, [pc, #480]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a77      	ldr	r2, [pc, #476]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e01d      	b.n	8002818 <HAL_RCC_OscConfig+0xd4>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0xbc>
 80027e6:	4b72      	ldr	r3, [pc, #456]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a71      	ldr	r2, [pc, #452]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0xd4>
 8002800:	4b6b      	ldr	r3, [pc, #428]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a6a      	ldr	r2, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a67      	ldr	r2, [pc, #412]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fd ff54 	bl	80006cc <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fd ff50 	bl	80006cc <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e200      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0xe4>
 8002846:	e014      	b.n	8002872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fd ff40 	bl	80006cc <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002850:	f7fd ff3c 	bl	80006cc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1ec      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x10c>
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d063      	beq.n	8002946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800287e:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800288a:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b08      	cmp	r3, #8
 8002894:	d11c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x18c>
 8002896:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d116      	bne.n	80028d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x176>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e1c0      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4939      	ldr	r1, [pc, #228]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	e03a      	b.n	8002946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fd fef5 	bl	80006cc <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fd fef1 	bl	80006cc <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1a1      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4927      	ldr	r1, [pc, #156]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
 8002918:	e015      	b.n	8002946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fd fed4 	bl	80006cc <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002928:	f7fd fed0 	bl	80006cc <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e180      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d03a      	beq.n	80029c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d019      	beq.n	800298e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fd feb4 	bl	80006cc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002968:	f7fd feb0 	bl	80006cc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e160      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002986:	2001      	movs	r0, #1
 8002988:	f000 fa9c 	bl	8002ec4 <RCC_Delay>
 800298c:	e01c      	b.n	80029c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7fd fe9a 	bl	80006cc <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299a:	e00f      	b.n	80029bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299c:	f7fd fe96 	bl	80006cc <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d908      	bls.n	80029bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e146      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	42420000 	.word	0x42420000
 80029b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	4b92      	ldr	r3, [pc, #584]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e9      	bne.n	800299c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80a6 	beq.w	8002b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029da:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10d      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b88      	ldr	r3, [pc, #544]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a87      	ldr	r2, [pc, #540]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b85      	ldr	r3, [pc, #532]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b82      	ldr	r3, [pc, #520]	; (8002c0c <HAL_RCC_OscConfig+0x4c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d118      	bne.n	8002a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b7f      	ldr	r3, [pc, #508]	; (8002c0c <HAL_RCC_OscConfig+0x4c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7e      	ldr	r2, [pc, #504]	; (8002c0c <HAL_RCC_OscConfig+0x4c8>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fd fe57 	bl	80006cc <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fd fe53 	bl	80006cc <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b64      	cmp	r3, #100	; 0x64
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e103      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b75      	ldr	r3, [pc, #468]	; (8002c0c <HAL_RCC_OscConfig+0x4c8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x312>
 8002a48:	4b6f      	ldr	r3, [pc, #444]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4a6e      	ldr	r2, [pc, #440]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6213      	str	r3, [r2, #32]
 8002a54:	e02d      	b.n	8002ab2 <HAL_RCC_OscConfig+0x36e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x334>
 8002a5e:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4a69      	ldr	r2, [pc, #420]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6213      	str	r3, [r2, #32]
 8002a6a:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a66      	ldr	r2, [pc, #408]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	6213      	str	r3, [r2, #32]
 8002a76:	e01c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x36e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d10c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x356>
 8002a80:	4b61      	ldr	r3, [pc, #388]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4a60      	ldr	r2, [pc, #384]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	6213      	str	r3, [r2, #32]
 8002a8c:	4b5e      	ldr	r3, [pc, #376]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4a5d      	ldr	r2, [pc, #372]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6213      	str	r3, [r2, #32]
 8002a98:	e00b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x36e>
 8002a9a:	4b5b      	ldr	r3, [pc, #364]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4a5a      	ldr	r2, [pc, #360]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6213      	str	r3, [r2, #32]
 8002aa6:	4b58      	ldr	r3, [pc, #352]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d015      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fd fe07 	bl	80006cc <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fd fe03 	bl	80006cc <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e0b1      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	4b4b      	ldr	r3, [pc, #300]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ee      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x37e>
 8002ae4:	e014      	b.n	8002b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae6:	f7fd fdf1 	bl	80006cc <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7fd fded 	bl	80006cc <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e09b      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b04:	4b40      	ldr	r3, [pc, #256]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ee      	bne.n	8002aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d105      	bne.n	8002b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b16:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8087 	beq.w	8002c3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b2c:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d061      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d146      	bne.n	8002bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b40:	4b33      	ldr	r3, [pc, #204]	; (8002c10 <HAL_RCC_OscConfig+0x4cc>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fd fdc1 	bl	80006cc <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7fd fdbd 	bl	80006cc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e06d      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f0      	bne.n	8002b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d108      	bne.n	8002b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4921      	ldr	r1, [pc, #132]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a19      	ldr	r1, [r3, #32]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	491b      	ldr	r1, [pc, #108]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fd fd91 	bl	80006cc <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fd fd8d 	bl	80006cc <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e03d      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x46a>
 8002bcc:	e035      	b.n	8002c3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCC_OscConfig+0x4cc>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fd fd7a 	bl	80006cc <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fd fd76 	bl	80006cc <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e026      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x498>
 8002bfa:	e01e      	b.n	8002c3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e019      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x500>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0d0      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d910      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b67      	ldr	r3, [pc, #412]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	4965      	ldr	r1, [pc, #404]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b8      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	494d      	ldr	r1, [pc, #308]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d040      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d115      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e073      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06b      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f023 0203 	bic.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4936      	ldr	r1, [pc, #216]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d38:	f7fd fcc8 	bl	80006cc <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fd fcc4 	bl	80006cc <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e053      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 020c 	and.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1eb      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d210      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 0207 	bic.w	r2, r3, #7
 8002d7e:	4922      	ldr	r1, [pc, #136]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e032      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4916      	ldr	r1, [pc, #88]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	490e      	ldr	r1, [pc, #56]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dd6:	f000 f821 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	490a      	ldr	r1, [pc, #40]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	5ccb      	ldrb	r3, [r1, r3]
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_RCC_ClockConfig+0x1cc>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1d0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fc26 	bl	8000648 <HAL_InitTick>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08008308 	.word	0x08008308
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004

08002e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x30>
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d003      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x36>
 8002e4a:	e027      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e4e:	613b      	str	r3, [r7, #16]
      break;
 8002e50:	e027      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	0c9b      	lsrs	r3, r3, #18
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e5c:	5cd3      	ldrb	r3, [r2, r3]
 8002e5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	0c5b      	lsrs	r3, r3, #17
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a0d      	ldr	r2, [pc, #52]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7e:	fb03 f202 	mul.w	r2, r3, r2
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e004      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e90:	fb02 f303 	mul.w	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	613b      	str	r3, [r7, #16]
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9e:	613b      	str	r3, [r7, #16]
      break;
 8002ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea2:	693b      	ldr	r3, [r7, #16]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	007a1200 	.word	0x007a1200
 8002eb8:	08008318 	.word	0x08008318
 8002ebc:	08008328 	.word	0x08008328
 8002ec0:	003d0900 	.word	0x003d0900

08002ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <RCC_Delay+0x34>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <RCC_Delay+0x38>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a5b      	lsrs	r3, r3, #9
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee0:	bf00      	nop
  }
  while (Delay --);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	60fa      	str	r2, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <RCC_Delay+0x1c>
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d07d      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f20:	4b4f      	ldr	r3, [pc, #316]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10d      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2c:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	4a4b      	ldr	r2, [pc, #300]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f36:	61d3      	str	r3, [r2, #28]
 8002f38:	4b49      	ldr	r3, [pc, #292]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f44:	2301      	movs	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b46      	ldr	r3, [pc, #280]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d118      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f54:	4b43      	ldr	r3, [pc, #268]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a42      	ldr	r2, [pc, #264]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f60:	f7fd fbb4 	bl	80006cc <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	e008      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fd fbb0 	bl	80006cc <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e06d      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d02e      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d027      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fae:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fba:	4a29      	ldr	r2, [pc, #164]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d014      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fd fb7f 	bl	80006cc <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fd fb7b 	bl	80006cc <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e036      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ee      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4917      	ldr	r1, [pc, #92]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003002:	4313      	orrs	r3, r2
 8003004:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a13      	ldr	r2, [pc, #76]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003016:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	490b      	ldr	r1, [pc, #44]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4904      	ldr	r1, [pc, #16]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	42420440 	.word	0x42420440

0800306c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800306c:	b084      	sub	sp, #16
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	f107 0014 	add.w	r0, r7, #20
 800307a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	b004      	add	sp, #16
 800308a:	4770      	bx	lr

0800308c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800309c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80030a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80030c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80030c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	4013      	ands	r3, r2
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003104:	b084      	sub	sp, #16
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	f107 0014 	add.w	r0, r7, #20
 8003112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	b004      	add	sp, #16
 8003142:	4770      	bx	lr

08003144 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003144:	b480      	push	{r7}
 8003146:	b09d      	sub	sp, #116	; 0x74
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	78db      	ldrb	r3, [r3, #3]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d81f      	bhi.n	80031b6 <USB_ActivateEndpoint+0x72>
 8003176:	a201      	add	r2, pc, #4	; (adr r2, 800317c <USB_ActivateEndpoint+0x38>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	0800318d 	.word	0x0800318d
 8003180:	080031a9 	.word	0x080031a9
 8003184:	080031bf 	.word	0x080031bf
 8003188:	0800319b 	.word	0x0800319b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800318c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003194:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003198:	e012      	b.n	80031c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800319a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800319e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80031a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80031a6:	e00b      	b.n	80031c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80031a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80031ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80031b4:	e004      	b.n	80031c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80031bc:	e000      	b.n	80031c0 <USB_ActivateEndpoint+0x7c>
      break;
 80031be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	441a      	add	r2, r3
 80031ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80031ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031de:	b29b      	uxth	r3, r3
 80031e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4313      	orrs	r3, r2
 8003202:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	441a      	add	r2, r3
 8003210:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800321c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003224:	b29b      	uxth	r3, r3
 8003226:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	7b1b      	ldrb	r3, [r3, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 8178 	bne.w	8003522 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8084 	beq.w	8003344 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4413      	add	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	011a      	lsls	r2, r3, #4
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	88db      	ldrh	r3, [r3, #6]
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	b29b      	uxth	r3, r3
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	827b      	strh	r3, [r7, #18]
 800327e:	8a7b      	ldrh	r3, [r7, #18]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <USB_ActivateEndpoint+0x17c>
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	823b      	strh	r3, [r7, #16]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	8a3b      	ldrh	r3, [r7, #16]
 80032ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032bc:	b29b      	uxth	r3, r3
 80032be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	78db      	ldrb	r3, [r3, #3]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d020      	beq.n	800330a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032de:	81bb      	strh	r3, [r7, #12]
 80032e0:	89bb      	ldrh	r3, [r7, #12]
 80032e2:	f083 0320 	eor.w	r3, r3, #32
 80032e6:	81bb      	strh	r3, [r7, #12]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	89bb      	ldrh	r3, [r7, #12]
 80032f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]
 8003308:	e2d5      	b.n	80038b6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003320:	81fb      	strh	r3, [r7, #14]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	89fb      	ldrh	r3, [r7, #14]
 800332e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333e:	b29b      	uxth	r3, r3
 8003340:	8013      	strh	r3, [r2, #0]
 8003342:	e2b8      	b.n	80038b6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	633b      	str	r3, [r7, #48]	; 0x30
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800334e:	b29b      	uxth	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	4413      	add	r3, r2
 8003356:	633b      	str	r3, [r7, #48]	; 0x30
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	011a      	lsls	r2, r3, #4
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	4413      	add	r3, r2
 8003362:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	88db      	ldrh	r3, [r3, #6]
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	b29b      	uxth	r3, r3
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	4413      	add	r3, r2
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	011a      	lsls	r2, r3, #4
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	4413      	add	r3, r2
 8003396:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b3e      	cmp	r3, #62	; 0x3e
 80033b2:	d91d      	bls.n	80033f0 <USB_ActivateEndpoint+0x2ac>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <USB_ActivateEndpoint+0x28a>
 80033c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ca:	3b01      	subs	r3, #1
 80033cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	029b      	lsls	r3, r3, #10
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4313      	orrs	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	801a      	strh	r2, [r3, #0]
 80033ee:	e026      	b.n	800343e <USB_ActivateEndpoint+0x2fa>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <USB_ActivateEndpoint+0x2ca>
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003406:	b29a      	uxth	r2, r3
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	801a      	strh	r2, [r3, #0]
 800340c:	e017      	b.n	800343e <USB_ActivateEndpoint+0x2fa>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	66bb      	str	r3, [r7, #104]	; 0x68
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <USB_ActivateEndpoint+0x2e4>
 8003422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003424:	3301      	adds	r3, #1
 8003426:	66bb      	str	r3, [r7, #104]	; 0x68
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29a      	uxth	r2, r3
 800342e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003430:	b29b      	uxth	r3, r3
 8003432:	029b      	lsls	r3, r3, #10
 8003434:	b29b      	uxth	r3, r3
 8003436:	4313      	orrs	r3, r2
 8003438:	b29a      	uxth	r2, r3
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	847b      	strh	r3, [r7, #34]	; 0x22
 800344c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800344e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01b      	beq.n	800348e <USB_ActivateEndpoint+0x34a>
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346c:	843b      	strh	r3, [r7, #32]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	441a      	add	r2, r3
 8003478:	8c3b      	ldrh	r3, [r7, #32]
 800347a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800347e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348a:	b29b      	uxth	r3, r3
 800348c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d124      	bne.n	80034e0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ac:	83bb      	strh	r3, [r7, #28]
 80034ae:	8bbb      	ldrh	r3, [r7, #28]
 80034b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034b4:	83bb      	strh	r3, [r7, #28]
 80034b6:	8bbb      	ldrh	r3, [r7, #28]
 80034b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034bc:	83bb      	strh	r3, [r7, #28]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	8bbb      	ldrh	r3, [r7, #28]
 80034ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034da:	b29b      	uxth	r3, r3
 80034dc:	8013      	strh	r3, [r2, #0]
 80034de:	e1ea      	b.n	80038b6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f6:	83fb      	strh	r3, [r7, #30]
 80034f8:	8bfb      	ldrh	r3, [r7, #30]
 80034fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034fe:	83fb      	strh	r3, [r7, #30]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	441a      	add	r2, r3
 800350a:	8bfb      	ldrh	r3, [r7, #30]
 800350c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351c:	b29b      	uxth	r3, r3
 800351e:	8013      	strh	r3, [r2, #0]
 8003520:	e1c9      	b.n	80038b6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	78db      	ldrb	r3, [r3, #3]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d11e      	bne.n	8003568 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003540:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	441a      	add	r2, r3
 800354e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800355e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003562:	b29b      	uxth	r3, r3
 8003564:	8013      	strh	r3, [r2, #0]
 8003566:	e01d      	b.n	80035a4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	441a      	add	r2, r3
 800358c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800359c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b4:	4413      	add	r3, r2
 80035b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	011a      	lsls	r2, r3, #4
 80035be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	891b      	ldrh	r3, [r3, #8]
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d6:	801a      	strh	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	657b      	str	r3, [r7, #84]	; 0x54
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e8:	4413      	add	r3, r2
 80035ea:	657b      	str	r3, [r7, #84]	; 0x54
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	011a      	lsls	r2, r3, #4
 80035f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035fa:	653b      	str	r3, [r7, #80]	; 0x50
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	895b      	ldrh	r3, [r3, #10]
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	b29b      	uxth	r3, r3
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 8093 	bne.w	800373c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01b      	beq.n	800366a <USB_ActivateEndpoint+0x526>
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003648:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	441a      	add	r2, r3
 8003654:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800365a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003666:	b29b      	uxth	r3, r3
 8003668:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003678:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01b      	beq.n	80036ba <USB_ActivateEndpoint+0x576>
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003698:	877b      	strh	r3, [r7, #58]	; 0x3a
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	441a      	add	r2, r3
 80036a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80036a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80036d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80036da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	441a      	add	r2, r3
 80036ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fe:	b29b      	uxth	r3, r3
 8003700:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003718:	86fb      	strh	r3, [r7, #54]	; 0x36
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	441a      	add	r2, r3
 8003724:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800372e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003736:	b29b      	uxth	r3, r3
 8003738:	8013      	strh	r3, [r2, #0]
 800373a:	e0bc      	b.n	80038b6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800374c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01d      	beq.n	8003794 <USB_ActivateEndpoint+0x650>
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	441a      	add	r2, r3
 800377c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800378c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003790:	b29b      	uxth	r3, r3
 8003792:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80037a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01d      	beq.n	80037ec <USB_ActivateEndpoint+0x6a8>
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	441a      	add	r2, r3
 80037d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	78db      	ldrb	r3, [r3, #3]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d024      	beq.n	800383e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800380e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003812:	f083 0320 	eor.w	r3, r3, #32
 8003816:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	441a      	add	r2, r3
 8003824:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003838:	b29b      	uxth	r3, r3
 800383a:	8013      	strh	r3, [r2, #0]
 800383c:	e01d      	b.n	800387a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003854:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	441a      	add	r2, r3
 8003862:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800386a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800386e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003876:	b29b      	uxth	r3, r3
 8003878:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003890:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	441a      	add	r2, r3
 800389e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80038a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80038b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3774      	adds	r7, #116	; 0x74
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b08d      	sub	sp, #52	; 0x34
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	7b1b      	ldrb	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 808e 	bne.w	80039f4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d044      	beq.n	800396a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	81bb      	strh	r3, [r7, #12]
 80038ee:	89bb      	ldrh	r3, [r7, #12]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <USB_DeactivateEndpoint+0x6c>
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	817b      	strh	r3, [r7, #10]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	897b      	ldrh	r3, [r7, #10]
 800391c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800392c:	b29b      	uxth	r3, r3
 800392e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003946:	813b      	strh	r3, [r7, #8]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	893b      	ldrh	r3, [r7, #8]
 8003954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]
 8003968:	e192      	b.n	8003c90 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	827b      	strh	r3, [r7, #18]
 8003978:	8a7b      	ldrh	r3, [r7, #18]
 800397a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01b      	beq.n	80039ba <USB_DeactivateEndpoint+0xf6>
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	823b      	strh	r3, [r7, #16]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	8a3b      	ldrh	r3, [r7, #16]
 80039a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d0:	81fb      	strh	r3, [r7, #14]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	441a      	add	r2, r3
 80039dc:	89fb      	ldrh	r3, [r7, #14]
 80039de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	8013      	strh	r3, [r2, #0]
 80039f2:	e14d      	b.n	8003c90 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	785b      	ldrb	r3, [r3, #1]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 80a5 	bne.w	8003b48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	843b      	strh	r3, [r7, #32]
 8003a0c:	8c3b      	ldrh	r3, [r7, #32]
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01b      	beq.n	8003a4e <USB_DeactivateEndpoint+0x18a>
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2c:	83fb      	strh	r3, [r7, #30]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	441a      	add	r2, r3
 8003a38:	8bfb      	ldrh	r3, [r7, #30]
 8003a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	83bb      	strh	r3, [r7, #28]
 8003a5c:	8bbb      	ldrh	r3, [r7, #28]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01b      	beq.n	8003a9e <USB_DeactivateEndpoint+0x1da>
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7c:	837b      	strh	r3, [r7, #26]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	441a      	add	r2, r3
 8003a88:	8b7b      	ldrh	r3, [r7, #26]
 8003a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab4:	833b      	strh	r3, [r7, #24]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	441a      	add	r2, r3
 8003ac0:	8b3b      	ldrh	r3, [r7, #24]
 8003ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ace:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aec:	82fb      	strh	r3, [r7, #22]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	8afb      	ldrh	r3, [r7, #22]
 8003afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b24:	82bb      	strh	r3, [r7, #20]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	441a      	add	r2, r3
 8003b30:	8abb      	ldrh	r3, [r7, #20]
 8003b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	8013      	strh	r3, [r2, #0]
 8003b46:	e0a3      	b.n	8003c90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003b56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01b      	beq.n	8003b98 <USB_DeactivateEndpoint+0x2d4>
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003ba6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01b      	beq.n	8003be8 <USB_DeactivateEndpoint+0x324>
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	853b      	strh	r3, [r7, #40]	; 0x28
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	441a      	add	r2, r3
 8003bd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	441a      	add	r2, r3
 8003c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3734      	adds	r7, #52	; 0x34
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b0c2      	sub	sp, #264	; 0x108
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003caa:	6018      	str	r0, [r3, #0]
 8003cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cb4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	785b      	ldrb	r3, [r3, #1]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f040 86b7 	bne.w	8004a36 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d908      	bls.n	8003cf6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003cf4:	e007      	b.n	8003d06 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	7b1b      	ldrb	r3, [r3, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d13a      	bne.n	8003d8c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6959      	ldr	r1, [r3, #20]
 8003d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	88da      	ldrh	r2, [r3, #6]
 8003d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003d38:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003d3c:	6800      	ldr	r0, [r0, #0]
 8003d3e:	f001 fc9c 	bl	800567a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	011a      	lsls	r2, r3, #4
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	f000 be1f 	b.w	80049ca <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	78db      	ldrb	r3, [r3, #3]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	f040 8462 	bne.w	8004662 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	f240 83df 	bls.w	800457a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1a      	ldr	r2, [r3, #32]
 8003e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e28:	1ad2      	subs	r2, r2, r3
 8003e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 81c7 	beq.w	80041ec <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d177      	bne.n	8003f6a <USB_EPStartXfer+0x2ce>
 8003e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	4413      	add	r3, r2
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	011a      	lsls	r2, r3, #4
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	4413      	add	r3, r2
 8003eb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	801a      	strh	r2, [r3, #0]
 8003ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eca:	2b3e      	cmp	r3, #62	; 0x3e
 8003ecc:	d921      	bls.n	8003f12 <USB_EPStartXfer+0x276>
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <USB_EPStartXfer+0x252>
 8003ee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	029b      	lsls	r3, r3, #10
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	4313      	orrs	r3, r2
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	801a      	strh	r2, [r3, #0]
 8003f10:	e050      	b.n	8003fb4 <USB_EPStartXfer+0x318>
 8003f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <USB_EPStartXfer+0x294>
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	e041      	b.n	8003fb4 <USB_EPStartXfer+0x318>
 8003f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <USB_EPStartXfer+0x2b4>
 8003f46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	029b      	lsls	r3, r3, #10
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	4313      	orrs	r3, r2
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	801a      	strh	r2, [r3, #0]
 8003f68:	e024      	b.n	8003fb4 <USB_EPStartXfer+0x318>
 8003f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	785b      	ldrb	r3, [r3, #1]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d11c      	bne.n	8003fb4 <USB_EPStartXfer+0x318>
 8003f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	4413      	add	r3, r2
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30
 8003f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	011a      	lsls	r2, r3, #4
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	895b      	ldrh	r3, [r3, #10]
 8003fc0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6959      	ldr	r1, [r3, #20]
 8003fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003fda:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003fde:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003fe2:	6800      	ldr	r0, [r0, #0]
 8003fe4:	f001 fb49 	bl	800567a <USB_WritePMA>
            ep->xfer_buff += len;
 8003fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff8:	441a      	add	r2, r3
 8003ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800400a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6a1a      	ldr	r2, [r3, #32]
 8004012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	429a      	cmp	r2, r3
 8004020:	d90f      	bls.n	8004042 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6a1a      	ldr	r2, [r3, #32]
 800402e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004032:	1ad2      	subs	r2, r2, r3
 8004034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	621a      	str	r2, [r3, #32]
 8004040:	e00e      	b.n	8004060 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2200      	movs	r2, #0
 800405e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d177      	bne.n	8004160 <USB_EPStartXfer+0x4c4>
 8004070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004074:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	4413      	add	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	011a      	lsls	r2, r3, #4
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	4413      	add	r3, r2
 80040a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c0:	2b3e      	cmp	r3, #62	; 0x3e
 80040c2:	d921      	bls.n	8004108 <USB_EPStartXfer+0x46c>
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <USB_EPStartXfer+0x448>
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	3b01      	subs	r3, #1
 80040e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004100:	b29a      	uxth	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e056      	b.n	80041b6 <USB_EPStartXfer+0x51a>
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <USB_EPStartXfer+0x48a>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411e:	b29a      	uxth	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	e047      	b.n	80041b6 <USB_EPStartXfer+0x51a>
 8004126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800412a:	085b      	lsrs	r3, r3, #1
 800412c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <USB_EPStartXfer+0x4aa>
 800413c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004140:	3301      	adds	r3, #1
 8004142:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29a      	uxth	r2, r3
 800414c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004150:	b29b      	uxth	r3, r3
 8004152:	029b      	lsls	r3, r3, #10
 8004154:	b29b      	uxth	r3, r3
 8004156:	4313      	orrs	r3, r2
 8004158:	b29a      	uxth	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	801a      	strh	r2, [r3, #0]
 800415e:	e02a      	b.n	80041b6 <USB_EPStartXfer+0x51a>
 8004160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	785b      	ldrb	r3, [r3, #1]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d122      	bne.n	80041b6 <USB_EPStartXfer+0x51a>
 8004170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418a:	b29b      	uxth	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	4413      	add	r3, r2
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	011a      	lsls	r2, r3, #4
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	4413      	add	r3, r2
 80041a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80041b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	891b      	ldrh	r3, [r3, #8]
 80041c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6959      	ldr	r1, [r3, #20]
 80041d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80041dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80041e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80041e4:	6800      	ldr	r0, [r0, #0]
 80041e6:	f001 fa48 	bl	800567a <USB_WritePMA>
 80041ea:	e3ee      	b.n	80049ca <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d177      	bne.n	80042ec <USB_EPStartXfer+0x650>
 80041fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	64bb      	str	r3, [r7, #72]	; 0x48
 8004208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800420c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004216:	b29b      	uxth	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421c:	4413      	add	r3, r2
 800421e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	011a      	lsls	r2, r3, #4
 800422e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004230:	4413      	add	r3, r2
 8004232:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004236:	647b      	str	r3, [r7, #68]	; 0x44
 8004238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004242:	b29a      	uxth	r2, r3
 8004244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800424c:	2b3e      	cmp	r3, #62	; 0x3e
 800424e:	d921      	bls.n	8004294 <USB_EPStartXfer+0x5f8>
 8004250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <USB_EPStartXfer+0x5d4>
 8004266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800426a:	3b01      	subs	r3, #1
 800426c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29a      	uxth	r2, r3
 8004276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800427a:	b29b      	uxth	r3, r3
 800427c:	029b      	lsls	r3, r3, #10
 800427e:	b29b      	uxth	r3, r3
 8004280:	4313      	orrs	r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428c:	b29a      	uxth	r2, r3
 800428e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	e056      	b.n	8004342 <USB_EPStartXfer+0x6a6>
 8004294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <USB_EPStartXfer+0x616>
 800429c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	e047      	b.n	8004342 <USB_EPStartXfer+0x6a6>
 80042b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <USB_EPStartXfer+0x636>
 80042c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042cc:	3301      	adds	r3, #1
 80042ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80042d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042dc:	b29b      	uxth	r3, r3
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e8:	801a      	strh	r2, [r3, #0]
 80042ea:	e02a      	b.n	8004342 <USB_EPStartXfer+0x6a6>
 80042ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d122      	bne.n	8004342 <USB_EPStartXfer+0x6a6>
 80042fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	653b      	str	r3, [r7, #80]	; 0x50
 8004308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800430c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431c:	4413      	add	r3, r2
 800431e:	653b      	str	r3, [r7, #80]	; 0x50
 8004320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	011a      	lsls	r2, r3, #4
 800432e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004330:	4413      	add	r3, r2
 8004332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433c:	b29a      	uxth	r2, r3
 800433e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004340:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	891b      	ldrh	r3, [r3, #8]
 800434e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6959      	ldr	r1, [r3, #20]
 800435e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004362:	b29b      	uxth	r3, r3
 8004364:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004368:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800436c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004370:	6800      	ldr	r0, [r0, #0]
 8004372:	f001 f982 	bl	800567a <USB_WritePMA>
            ep->xfer_buff += len;
 8004376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800437a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004386:	441a      	add	r2, r3
 8004388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800438c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6a1a      	ldr	r2, [r3, #32]
 80043a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d90f      	bls.n	80043d0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80043b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c0:	1ad2      	subs	r2, r2, r3
 80043c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	621a      	str	r2, [r3, #32]
 80043ce:	e00e      	b.n	80043ee <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80043d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80043e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2200      	movs	r2, #0
 80043ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	643b      	str	r3, [r7, #64]	; 0x40
 80043fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d177      	bne.n	80044fa <USB_EPStartXfer+0x85e>
 800440a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800440e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	63bb      	str	r3, [r7, #56]	; 0x38
 8004416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800441a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004424:	b29b      	uxth	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	4413      	add	r3, r2
 800442c:	63bb      	str	r3, [r7, #56]	; 0x38
 800442e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	011a      	lsls	r2, r3, #4
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	4413      	add	r3, r2
 8004440:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004444:	637b      	str	r3, [r7, #52]	; 0x34
 8004446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004450:	b29a      	uxth	r2, r3
 8004452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800445a:	2b3e      	cmp	r3, #62	; 0x3e
 800445c:	d921      	bls.n	80044a2 <USB_EPStartXfer+0x806>
 800445e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <USB_EPStartXfer+0x7e2>
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	3b01      	subs	r3, #1
 800447a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800447e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29a      	uxth	r2, r3
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	b29b      	uxth	r3, r3
 800448a:	029b      	lsls	r3, r3, #10
 800448c:	b29b      	uxth	r3, r3
 800448e:	4313      	orrs	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449a:	b29a      	uxth	r2, r3
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	e050      	b.n	8004544 <USB_EPStartXfer+0x8a8>
 80044a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <USB_EPStartXfer+0x824>
 80044aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	e041      	b.n	8004544 <USB_EPStartXfer+0x8a8>
 80044c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <USB_EPStartXfer+0x844>
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044da:	3301      	adds	r3, #1
 80044dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4313      	orrs	r3, r2
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	e024      	b.n	8004544 <USB_EPStartXfer+0x8a8>
 80044fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d11c      	bne.n	8004544 <USB_EPStartXfer+0x8a8>
 800450a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800450e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004518:	b29b      	uxth	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800451e:	4413      	add	r3, r2
 8004520:	643b      	str	r3, [r7, #64]	; 0x40
 8004522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	011a      	lsls	r2, r3, #4
 8004530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004532:	4413      	add	r3, r2
 8004534:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800453a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800453e:	b29a      	uxth	r2, r3
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	895b      	ldrh	r3, [r3, #10]
 8004550:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6959      	ldr	r1, [r3, #20]
 8004560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004564:	b29b      	uxth	r3, r3
 8004566:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800456a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800456e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004572:	6800      	ldr	r0, [r0, #0]
 8004574:	f001 f881 	bl	800567a <USB_WritePMA>
 8004578:	e227      	b.n	80049ca <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800457a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800457e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800458a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800458e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80045b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	441a      	add	r2, r3
 80045ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80045d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004600:	b29b      	uxth	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004606:	4413      	add	r3, r2
 8004608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800460a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800460e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	011a      	lsls	r2, r3, #4
 8004618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461a:	4413      	add	r3, r2
 800461c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004620:	65bb      	str	r3, [r7, #88]	; 0x58
 8004622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004626:	b29a      	uxth	r2, r3
 8004628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800462a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800462c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	891b      	ldrh	r3, [r3, #8]
 8004638:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800463c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6959      	ldr	r1, [r3, #20]
 8004648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800464c:	b29b      	uxth	r3, r3
 800464e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004652:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004656:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	f001 f80d 	bl	800567a <USB_WritePMA>
 8004660:	e1b3      	b.n	80049ca <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004672:	1ad2      	subs	r2, r2, r3
 8004674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80c6 	beq.w	8004834 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	673b      	str	r3, [r7, #112]	; 0x70
 80046b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	785b      	ldrb	r3, [r3, #1]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d177      	bne.n	80047b4 <USB_EPStartXfer+0xb18>
 80046c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046e4:	4413      	add	r3, r2
 80046e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	011a      	lsls	r2, r3, #4
 80046f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046f8:	4413      	add	r3, r2
 80046fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470a:	b29a      	uxth	r2, r3
 800470c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004714:	2b3e      	cmp	r3, #62	; 0x3e
 8004716:	d921      	bls.n	800475c <USB_EPStartXfer+0xac0>
 8004718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <USB_EPStartXfer+0xa9c>
 800472e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004732:	3b01      	subs	r3, #1
 8004734:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29a      	uxth	r2, r3
 800473e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004742:	b29b      	uxth	r3, r3
 8004744:	029b      	lsls	r3, r3, #10
 8004746:	b29b      	uxth	r3, r3
 8004748:	4313      	orrs	r3, r2
 800474a:	b29b      	uxth	r3, r3
 800474c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004754:	b29a      	uxth	r2, r3
 8004756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	e050      	b.n	80047fe <USB_EPStartXfer+0xb62>
 800475c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <USB_EPStartXfer+0xade>
 8004764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004772:	b29a      	uxth	r2, r3
 8004774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	e041      	b.n	80047fe <USB_EPStartXfer+0xb62>
 800477a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <USB_EPStartXfer+0xafe>
 8004790:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004794:	3301      	adds	r3, #1
 8004796:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800479a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	029b      	lsls	r3, r3, #10
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4313      	orrs	r3, r2
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047b0:	801a      	strh	r2, [r3, #0]
 80047b2:	e024      	b.n	80047fe <USB_EPStartXfer+0xb62>
 80047b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d11c      	bne.n	80047fe <USB_EPStartXfer+0xb62>
 80047c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047d8:	4413      	add	r3, r2
 80047da:	673b      	str	r3, [r7, #112]	; 0x70
 80047dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	011a      	lsls	r2, r3, #4
 80047ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ec:	4413      	add	r3, r2
 80047ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80047fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	895b      	ldrh	r3, [r3, #10]
 800480a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800480e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6959      	ldr	r1, [r3, #20]
 800481a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800481e:	b29b      	uxth	r3, r3
 8004820:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004824:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004828:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800482c:	6800      	ldr	r0, [r0, #0]
 800482e:	f000 ff24 	bl	800567a <USB_WritePMA>
 8004832:	e0ca      	b.n	80049ca <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d177      	bne.n	8004934 <USB_EPStartXfer+0xc98>
 8004844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004854:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485e:	b29b      	uxth	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004864:	4413      	add	r3, r2
 8004866:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800486c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	011a      	lsls	r2, r3, #4
 8004876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004878:	4413      	add	r3, r2
 800487a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800487e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800488a:	b29a      	uxth	r2, r3
 800488c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488e:	801a      	strh	r2, [r3, #0]
 8004890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004894:	2b3e      	cmp	r3, #62	; 0x3e
 8004896:	d921      	bls.n	80048dc <USB_EPStartXfer+0xc40>
 8004898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <USB_EPStartXfer+0xc1c>
 80048ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29a      	uxth	r2, r3
 80048be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	029b      	lsls	r3, r3, #10
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	4313      	orrs	r3, r2
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	e05c      	b.n	8004996 <USB_EPStartXfer+0xcfa>
 80048dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <USB_EPStartXfer+0xc5e>
 80048e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f6:	801a      	strh	r2, [r3, #0]
 80048f8:	e04d      	b.n	8004996 <USB_EPStartXfer+0xcfa>
 80048fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <USB_EPStartXfer+0xc7e>
 8004910:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004914:	3301      	adds	r3, #1
 8004916:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800491a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29a      	uxth	r2, r3
 8004920:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004924:	b29b      	uxth	r3, r3
 8004926:	029b      	lsls	r3, r3, #10
 8004928:	b29b      	uxth	r3, r3
 800492a:	4313      	orrs	r3, r2
 800492c:	b29a      	uxth	r2, r3
 800492e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	e030      	b.n	8004996 <USB_EPStartXfer+0xcfa>
 8004934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d128      	bne.n	8004996 <USB_EPStartXfer+0xcfa>
 8004944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004960:	b29b      	uxth	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004968:	4413      	add	r3, r2
 800496a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800496e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	011a      	lsls	r2, r3, #4
 800497c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004980:	4413      	add	r3, r2
 8004982:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004986:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800498e:	b29a      	uxth	r2, r3
 8004990:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004994:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800499a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	891b      	ldrh	r3, [r3, #8]
 80049a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6959      	ldr	r1, [r3, #20]
 80049b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80049bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80049c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80049c4:	6800      	ldr	r0, [r0, #0]
 80049c6:	f000 fe58 	bl	800567a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80049ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f0:	817b      	strh	r3, [r7, #10]
 80049f2:	897b      	ldrh	r3, [r7, #10]
 80049f4:	f083 0310 	eor.w	r3, r3, #16
 80049f8:	817b      	strh	r3, [r7, #10]
 80049fa:	897b      	ldrh	r3, [r7, #10]
 80049fc:	f083 0320 	eor.w	r3, r3, #32
 8004a00:	817b      	strh	r3, [r7, #10]
 8004a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	897b      	ldrh	r3, [r7, #10]
 8004a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	8013      	strh	r3, [r2, #0]
 8004a32:	f000 bcde 	b.w	80053f2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	7b1b      	ldrb	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f040 80bb 	bne.w	8004bbe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d917      	bls.n	8004a94 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a84:	1ad2      	subs	r2, r2, r3
 8004a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	619a      	str	r2, [r3, #24]
 8004a92:	e00e      	b.n	8004ab2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	011a      	lsls	r2, r3, #4
 8004aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004aee:	4413      	add	r3, r2
 8004af0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004af4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b10:	2b3e      	cmp	r3, #62	; 0x3e
 8004b12:	d924      	bls.n	8004b5e <USB_EPStartXfer+0xec2>
 8004b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d104      	bne.n	8004b34 <USB_EPStartXfer+0xe98>
 8004b2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	029b      	lsls	r3, r3, #10
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	f000 bc10 	b.w	800537e <USB_EPStartXfer+0x16e2>
 8004b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <USB_EPStartXfer+0xee4>
 8004b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	e3fe      	b.n	800537e <USB_EPStartXfer+0x16e2>
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <USB_EPStartXfer+0xf04>
 8004b96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e3df      	b.n	800537e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	78db      	ldrb	r3, [r3, #3]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	f040 8218 	bne.w	8005000 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 809d 	bne.w	8004d1c <USB_EPStartXfer+0x1080>
 8004be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c06:	4413      	add	r3, r2
 8004c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	011a      	lsls	r2, r3, #4
 8004c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c1e:	4413      	add	r3, r2
 8004c20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b3e      	cmp	r3, #62	; 0x3e
 8004c4a:	d92b      	bls.n	8004ca4 <USB_EPStartXfer+0x1008>
 8004c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <USB_EPStartXfer+0xfe0>
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c76:	3b01      	subs	r3, #1
 8004c78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	029b      	lsls	r3, r3, #10
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	e070      	b.n	8004d86 <USB_EPStartXfer+0x10ea>
 8004ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10c      	bne.n	8004cce <USB_EPStartXfer+0x1032>
 8004cb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	e05b      	b.n	8004d86 <USB_EPStartXfer+0x10ea>
 8004cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <USB_EPStartXfer+0x1062>
 8004cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	029b      	lsls	r3, r3, #10
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d18:	801a      	strh	r2, [r3, #0]
 8004d1a:	e034      	b.n	8004d86 <USB_EPStartXfer+0x10ea>
 8004d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d12c      	bne.n	8004d86 <USB_EPStartXfer+0x10ea>
 8004d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d50:	4413      	add	r3, r2
 8004d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	011a      	lsls	r2, r3, #4
 8004d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d68:	4413      	add	r3, r2
 8004d6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	785b      	ldrb	r3, [r3, #1]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f040 809d 	bne.w	8004ee0 <USB_EPStartXfer+0x1244>
 8004da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dca:	4413      	add	r3, r2
 8004dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004de2:	4413      	add	r3, r2
 8004de4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e0e:	d92b      	bls.n	8004e68 <USB_EPStartXfer+0x11cc>
 8004e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d104      	bne.n	8004e40 <USB_EPStartXfer+0x11a4>
 8004e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	029b      	lsls	r3, r3, #10
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4313      	orrs	r3, r2
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e64:	801a      	strh	r2, [r3, #0]
 8004e66:	e069      	b.n	8004f3c <USB_EPStartXfer+0x12a0>
 8004e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10c      	bne.n	8004e92 <USB_EPStartXfer+0x11f6>
 8004e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e054      	b.n	8004f3c <USB_EPStartXfer+0x12a0>
 8004e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d004      	beq.n	8004ec2 <USB_EPStartXfer+0x1226>
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	029b      	lsls	r3, r3, #10
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e02d      	b.n	8004f3c <USB_EPStartXfer+0x12a0>
 8004ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d125      	bne.n	8004f3c <USB_EPStartXfer+0x12a0>
 8004ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f06:	4413      	add	r3, r2
 8004f08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	011a      	lsls	r2, r3, #4
 8004f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f1e:	4413      	add	r3, r2
 8004f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f3a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8218 	beq.w	800537e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <USB_EPStartXfer+0x12ea>
 8004f7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10d      	bne.n	8004fa2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 81f5 	bne.w	800537e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 81ee 	bne.w	800537e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	8013      	strh	r3, [r2, #0]
 8004ffe:	e1be      	b.n	800537e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	78db      	ldrb	r3, [r3, #3]
 800500c:	2b01      	cmp	r3, #1
 800500e:	f040 81b4 	bne.w	800537a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	429a      	cmp	r2, r3
 800502c:	d917      	bls.n	800505e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800502e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800503e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	619a      	str	r2, [r3, #24]
 800505c:	e00e      	b.n	800507c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800505e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800506e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800507c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f040 8085 	bne.w	8005198 <USB_EPStartXfer+0x14fc>
 800508e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800509c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050b2:	4413      	add	r3, r2
 80050b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	011a      	lsls	r2, r3, #4
 80050c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050ca:	4413      	add	r3, r2
 80050cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ec:	2b3e      	cmp	r3, #62	; 0x3e
 80050ee:	d923      	bls.n	8005138 <USB_EPStartXfer+0x149c>
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	2b00      	cmp	r3, #0
 8005104:	d104      	bne.n	8005110 <USB_EPStartXfer+0x1474>
 8005106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510a:	3b01      	subs	r3, #1
 800510c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005110:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29a      	uxth	r2, r3
 8005118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800511c:	b29b      	uxth	r3, r3
 800511e:	029b      	lsls	r3, r3, #10
 8005120:	b29b      	uxth	r3, r3
 8005122:	4313      	orrs	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800512e:	b29a      	uxth	r2, r3
 8005130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	e060      	b.n	80051fa <USB_EPStartXfer+0x155e>
 8005138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10c      	bne.n	800515a <USB_EPStartXfer+0x14be>
 8005140:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005150:	b29a      	uxth	r2, r3
 8005152:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	e04f      	b.n	80051fa <USB_EPStartXfer+0x155e>
 800515a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <USB_EPStartXfer+0x14de>
 8005170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005174:	3301      	adds	r3, #1
 8005176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800517a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29a      	uxth	r2, r3
 8005182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005186:	b29b      	uxth	r3, r3
 8005188:	029b      	lsls	r3, r3, #10
 800518a:	b29b      	uxth	r3, r3
 800518c:	4313      	orrs	r3, r2
 800518e:	b29a      	uxth	r2, r3
 8005190:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	e030      	b.n	80051fa <USB_EPStartXfer+0x155e>
 8005198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d128      	bne.n	80051fa <USB_EPStartXfer+0x155e>
 80051a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80051b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051cc:	4413      	add	r3, r2
 80051ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80051d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	011a      	lsls	r2, r3, #4
 80051e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051e4:	4413      	add	r3, r2
 80051e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051f8:	801a      	strh	r2, [r3, #0]
 80051fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	785b      	ldrb	r3, [r3, #1]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 8085 	bne.w	8005324 <USB_EPStartXfer+0x1688>
 800521a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005236:	b29b      	uxth	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800523e:	4413      	add	r3, r2
 8005240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	011a      	lsls	r2, r3, #4
 8005252:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005256:	4413      	add	r3, r2
 8005258:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800525c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800526c:	b29a      	uxth	r2, r3
 800526e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005278:	2b3e      	cmp	r3, #62	; 0x3e
 800527a:	d923      	bls.n	80052c4 <USB_EPStartXfer+0x1628>
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <USB_EPStartXfer+0x1600>
 8005292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005296:	3b01      	subs	r3, #1
 8005298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800529c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	029b      	lsls	r3, r3, #10
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4313      	orrs	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052c0:	801a      	strh	r2, [r3, #0]
 80052c2:	e05c      	b.n	800537e <USB_EPStartXfer+0x16e2>
 80052c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10c      	bne.n	80052e6 <USB_EPStartXfer+0x164a>
 80052cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052dc:	b29a      	uxth	r2, r3
 80052de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	e04b      	b.n	800537e <USB_EPStartXfer+0x16e2>
 80052e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <USB_EPStartXfer+0x166a>
 80052fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005300:	3301      	adds	r3, #1
 8005302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29a      	uxth	r2, r3
 800530e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005312:	b29b      	uxth	r3, r3
 8005314:	029b      	lsls	r3, r3, #10
 8005316:	b29b      	uxth	r3, r3
 8005318:	4313      	orrs	r3, r2
 800531a:	b29a      	uxth	r2, r3
 800531c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	e02c      	b.n	800537e <USB_EPStartXfer+0x16e2>
 8005324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d124      	bne.n	800537e <USB_EPStartXfer+0x16e2>
 8005334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005342:	b29b      	uxth	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800534a:	4413      	add	r3, r2
 800534c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	011a      	lsls	r2, r3, #4
 800535e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005362:	4413      	add	r3, r2
 8005364:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005370:	b29a      	uxth	r2, r3
 8005372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	e001      	b.n	800537e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e03a      	b.n	80053f4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800537e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800538c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80053a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80053ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80053b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80053b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80053c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80053de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d020      	beq.n	8005452 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005426:	81bb      	strh	r3, [r7, #12]
 8005428:	89bb      	ldrh	r3, [r7, #12]
 800542a:	f083 0310 	eor.w	r3, r3, #16
 800542e:	81bb      	strh	r3, [r7, #12]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	89bb      	ldrh	r3, [r7, #12]
 800543c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544c:	b29b      	uxth	r3, r3
 800544e:	8013      	strh	r3, [r2, #0]
 8005450:	e01f      	b.n	8005492 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	81fb      	strh	r3, [r7, #14]
 800546a:	89fb      	ldrh	r3, [r7, #14]
 800546c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005470:	81fb      	strh	r3, [r7, #14]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	441a      	add	r2, r3
 800547c:	89fb      	ldrh	r3, [r7, #14]
 800547e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800549e:	b480      	push	{r7}
 80054a0:	b087      	sub	sp, #28
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	7b1b      	ldrb	r3, [r3, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 809d 	bne.w	80055ec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d04c      	beq.n	8005554 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	823b      	strh	r3, [r7, #16]
 80054c8:	8a3b      	ldrh	r3, [r7, #16]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01b      	beq.n	800550a <USB_EPClearStall+0x6c>
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e8:	81fb      	strh	r3, [r7, #14]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	441a      	add	r2, r3
 80054f4:	89fb      	ldrh	r3, [r7, #14]
 80054f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005506:	b29b      	uxth	r3, r3
 8005508:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	78db      	ldrb	r3, [r3, #3]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d06c      	beq.n	80055ec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005528:	81bb      	strh	r3, [r7, #12]
 800552a:	89bb      	ldrh	r3, [r7, #12]
 800552c:	f083 0320 	eor.w	r3, r3, #32
 8005530:	81bb      	strh	r3, [r7, #12]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	89bb      	ldrh	r3, [r7, #12]
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]
 8005552:	e04b      	b.n	80055ec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	82fb      	strh	r3, [r7, #22]
 8005562:	8afb      	ldrh	r3, [r7, #22]
 8005564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01b      	beq.n	80055a4 <USB_EPClearStall+0x106>
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	82bb      	strh	r3, [r7, #20]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	441a      	add	r2, r3
 800558e:	8abb      	ldrh	r3, [r7, #20]
 8005590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800559c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	827b      	strh	r3, [r7, #18]
 80055bc:	8a7b      	ldrh	r3, [r7, #18]
 80055be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055c2:	827b      	strh	r3, [r7, #18]
 80055c4:	8a7b      	ldrh	r3, [r7, #18]
 80055c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055ca:	827b      	strh	r3, [r7, #18]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	8a7b      	ldrh	r3, [r7, #18]
 80055d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2280      	movs	r2, #128	; 0x80
 800560e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005654:	b29b      	uxth	r3, r3
 8005656:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005658:	68fb      	ldr	r3, [r7, #12]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800567a:	b480      	push	{r7}
 800567c:	b08b      	sub	sp, #44	; 0x2c
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	4611      	mov	r1, r2
 8005686:	461a      	mov	r2, r3
 8005688:	460b      	mov	r3, r1
 800568a:	80fb      	strh	r3, [r7, #6]
 800568c:	4613      	mov	r3, r2
 800568e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005690:	88bb      	ldrh	r3, [r7, #4]
 8005692:	3301      	adds	r3, #1
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	005a      	lsls	r2, r3, #1
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	e01e      	b.n	80056f2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3301      	adds	r3, #1
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	b21a      	sxth	r2, r3
 80056c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	8a7a      	ldrh	r2, [r7, #18]
 80056d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	3302      	adds	r3, #2
 80056d8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	3302      	adds	r3, #2
 80056de:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	3301      	adds	r3, #1
 80056e4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3301      	adds	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	3b01      	subs	r3, #1
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1dd      	bne.n	80056b4 <USB_WritePMA+0x3a>
  }
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	372c      	adds	r7, #44	; 0x2c
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005704:	b480      	push	{r7}
 8005706:	b08b      	sub	sp, #44	; 0x2c
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4611      	mov	r1, r2
 8005710:	461a      	mov	r2, r3
 8005712:	460b      	mov	r3, r1
 8005714:	80fb      	strh	r3, [r7, #6]
 8005716:	4613      	mov	r3, r2
 8005718:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800571a:	88bb      	ldrh	r3, [r7, #4]
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	b29b      	uxth	r3, r3
 8005720:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	005a      	lsls	r2, r3, #1
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005736:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
 800573c:	e01b      	b.n	8005776 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	3302      	adds	r3, #2
 800574a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	b2da      	uxtb	r2, r3
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	3301      	adds	r3, #1
 8005758:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	b2da      	uxtb	r2, r3
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	3301      	adds	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	3302      	adds	r3, #2
 800576e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	3b01      	subs	r3, #1
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e0      	bne.n	800573e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800577c:	88bb      	ldrh	r3, [r7, #4]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d007      	beq.n	8005798 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	b2da      	uxtb	r2, r3
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	701a      	strb	r2, [r3, #0]
  }
}
 8005798:	bf00      	nop
 800579a:	372c      	adds	r7, #44	; 0x2c
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr

080057a2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	7c1b      	ldrb	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d115      	bne.n	80057e6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057be:	2202      	movs	r2, #2
 80057c0:	2181      	movs	r1, #129	; 0x81
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f001 ff1d 	bl	8007602 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d2:	2202      	movs	r2, #2
 80057d4:	2101      	movs	r1, #1
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 ff13 	bl	8007602 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80057e4:	e012      	b.n	800580c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057e6:	2340      	movs	r3, #64	; 0x40
 80057e8:	2202      	movs	r2, #2
 80057ea:	2181      	movs	r1, #129	; 0x81
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 ff08 	bl	8007602 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057f8:	2340      	movs	r3, #64	; 0x40
 80057fa:	2202      	movs	r2, #2
 80057fc:	2101      	movs	r1, #1
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 feff 	bl	8007602 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800580c:	2308      	movs	r3, #8
 800580e:	2203      	movs	r2, #3
 8005810:	2182      	movs	r1, #130	; 0x82
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 fef5 	bl	8007602 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800581e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005822:	f002 f815 	bl	8007850 <USBD_static_malloc>
 8005826:	4602      	mov	r2, r0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
 800583c:	e026      	b.n	800588c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005844:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	7c1b      	ldrb	r3, [r3, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800586e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005872:	2101      	movs	r1, #1
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 ffb5 	bl	80077e4 <USBD_LL_PrepareReceive>
 800587a:	e007      	b.n	800588c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005882:	2340      	movs	r3, #64	; 0x40
 8005884:	2101      	movs	r1, #1
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f001 ffac 	bl	80077e4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80058a6:	2181      	movs	r1, #129	; 0x81
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 fed0 	bl	800764e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80058b4:	2101      	movs	r1, #1
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 fec9 	bl	800764e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80058c4:	2182      	movs	r1, #130	; 0x82
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 fec1 	bl	800764e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 ffbb 	bl	8007868 <USBD_static_free>
    pdev->pClassData = NULL;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005914:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800592a:	2b00      	cmp	r3, #0
 800592c:	d039      	beq.n	80059a2 <USBD_CDC_Setup+0x9e>
 800592e:	2b20      	cmp	r3, #32
 8005930:	d17f      	bne.n	8005a32 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	88db      	ldrh	r3, [r3, #6]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d029      	beq.n	800598e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b25b      	sxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	da11      	bge.n	8005968 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005950:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	88d2      	ldrh	r2, [r2, #6]
 8005956:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005958:	6939      	ldr	r1, [r7, #16]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	88db      	ldrh	r3, [r3, #6]
 800595e:	461a      	mov	r2, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 fa0a 	bl	8006d7a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005966:	e06b      	b.n	8005a40 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	785a      	ldrb	r2, [r3, #1]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	88db      	ldrh	r3, [r3, #6]
 8005976:	b2da      	uxtb	r2, r3
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800597e:	6939      	ldr	r1, [r7, #16]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	88db      	ldrh	r3, [r3, #6]
 8005984:	461a      	mov	r2, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fa25 	bl	8006dd6 <USBD_CtlPrepareRx>
      break;
 800598c:	e058      	b.n	8005a40 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	7850      	ldrb	r0, [r2, #1]
 800599a:	2200      	movs	r2, #0
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	4798      	blx	r3
      break;
 80059a0:	e04e      	b.n	8005a40 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	2b0b      	cmp	r3, #11
 80059a8:	d02e      	beq.n	8005a08 <USBD_CDC_Setup+0x104>
 80059aa:	2b0b      	cmp	r3, #11
 80059ac:	dc38      	bgt.n	8005a20 <USBD_CDC_Setup+0x11c>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <USBD_CDC_Setup+0xb4>
 80059b2:	2b0a      	cmp	r3, #10
 80059b4:	d014      	beq.n	80059e0 <USBD_CDC_Setup+0xdc>
 80059b6:	e033      	b.n	8005a20 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d107      	bne.n	80059d2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80059c2:	f107 030c 	add.w	r3, r7, #12
 80059c6:	2202      	movs	r2, #2
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 f9d5 	bl	8006d7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059d0:	e02e      	b.n	8005a30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f001 f966 	bl	8006ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 80059da:	2302      	movs	r3, #2
 80059dc:	75fb      	strb	r3, [r7, #23]
          break;
 80059de:	e027      	b.n	8005a30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d107      	bne.n	80059fa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80059ea:	f107 030f 	add.w	r3, r7, #15
 80059ee:	2201      	movs	r2, #1
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f001 f9c1 	bl	8006d7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059f8:	e01a      	b.n	8005a30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 f952 	bl	8006ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a02:	2302      	movs	r3, #2
 8005a04:	75fb      	strb	r3, [r7, #23]
          break;
 8005a06:	e013      	b.n	8005a30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d00d      	beq.n	8005a2e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 f946 	bl	8006ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a1e:	e006      	b.n	8005a2e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f001 f93f 	bl	8006ca6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8005a2c:	e000      	b.n	8005a30 <USBD_CDC_Setup+0x12c>
          break;
 8005a2e:	bf00      	nop
      }
      break;
 8005a30:	e006      	b.n	8005a40 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 f936 	bl	8006ca6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3e:	bf00      	nop
  }

  return ret;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d03a      	beq.n	8005ae6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a70:	78fa      	ldrb	r2, [r7, #3]
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	331c      	adds	r3, #28
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d029      	beq.n	8005ada <USBD_CDC_DataIn+0x90>
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	331c      	adds	r3, #28
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	78f9      	ldrb	r1, [r7, #3]
 8005a9a:	68b8      	ldr	r0, [r7, #8]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4403      	add	r3, r0
 8005aa6:	3338      	adds	r3, #56	; 0x38
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	fbb2 f1f3 	udiv	r1, r2, r3
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d110      	bne.n	8005ada <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	331c      	adds	r3, #28
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005acc:	78f9      	ldrb	r1, [r7, #3]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 fe63 	bl	800779e <USBD_LL_Transmit>
 8005ad8:	e003      	b.n	8005ae2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e000      	b.n	8005ae8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005ae6:	2302      	movs	r3, #2
  }
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fe8e 	bl	800782a <USBD_LL_GetRxDataSize>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00d      	beq.n	8005b3c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b34:	4611      	mov	r1, r2
 8005b36:	4798      	blx	r3

    return USBD_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e000      	b.n	8005b3e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005b3c:	2302      	movs	r3, #2
  }
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b54:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d015      	beq.n	8005b8c <USBD_CDC_EP0_RxReady+0x46>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b66:	2bff      	cmp	r3, #255	; 0xff
 8005b68:	d010      	beq.n	8005b8c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005b78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b80:	b292      	uxth	r2, r2
 8005b82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	22ff      	movs	r2, #255	; 0xff
 8005b88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2243      	movs	r2, #67	; 0x43
 8005ba4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005ba6:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20000094 	.word	0x20000094

08005bb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2243      	movs	r2, #67	; 0x43
 8005bc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005bc6:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000050 	.word	0x20000050

08005bd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2243      	movs	r2, #67	; 0x43
 8005be4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005be6:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	200000d8 	.word	0x200000d8

08005bf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	220a      	movs	r2, #10
 8005c04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	2000000c 	.word	0x2000000c

08005c18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005c22:	2302      	movs	r3, #2
 8005c24:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c58:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c62:	88fa      	ldrh	r2, [r7, #6]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr

08005c76 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c86:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005caa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01c      	beq.n	8005cf0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d115      	bne.n	8005cec <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2181      	movs	r1, #129	; 0x81
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fd5b 	bl	800779e <USBD_LL_Transmit>

      return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e002      	b.n	8005cf2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d017      	beq.n	8005d44 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	7c1b      	ldrb	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d26:	2101      	movs	r1, #1
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 fd5b 	bl	80077e4 <USBD_LL_PrepareReceive>
 8005d2e:	e007      	b.n	8005d40 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d36:	2340      	movs	r3, #64	; 0x40
 8005d38:	2101      	movs	r1, #1
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f001 fd52 	bl	80077e4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d62:	2302      	movs	r3, #2
 8005d64:	e01a      	b.n	8005d9c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	79fa      	ldrb	r2, [r7, #7]
 8005d92:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f001 fbbf 	bl	8007518 <USBD_LL_Init>

  return USBD_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d006      	beq.n	8005dc6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]
 8005dc4:	e001      	b.n	8005dca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bc80      	pop	{r7}
 8005dd4:	4770      	bx	lr

08005dd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 fbf4 	bl	80075cc <USBD_LL_Start>

  return USBD_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr

08005e02 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00c      	beq.n	8005e36 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	4611      	mov	r1, r2
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	4798      	blx	r3
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	4611      	mov	r1, r2
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3

  return USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fed8 	bl	8006c2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d016      	beq.n	8005ed0 <USBD_LL_SetupStage+0x6a>
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d81c      	bhi.n	8005ee0 <USBD_LL_SetupStage+0x7a>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <USBD_LL_SetupStage+0x4a>
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d008      	beq.n	8005ec0 <USBD_LL_SetupStage+0x5a>
 8005eae:	e017      	b.n	8005ee0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f9cb 	bl	8006254 <USBD_StdDevReq>
      break;
 8005ebe:	e01a      	b.n	8005ef6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fa2d 	bl	8006328 <USBD_StdItfReq>
      break;
 8005ece:	e012      	b.n	8005ef6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fa6d 	bl	80063b8 <USBD_StdEPReq>
      break;
 8005ede:	e00a      	b.n	8005ef6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ee6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 fbcc 	bl	800768c <USBD_LL_StallEP>
      break;
 8005ef4:	bf00      	nop
  }

  return USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f0e:	7afb      	ldrb	r3, [r7, #11]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d14b      	bne.n	8005fac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f1a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d134      	bne.n	8005f90 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d919      	bls.n	8005f66 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d203      	bcs.n	8005f54 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	e002      	b.n	8005f5a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 ff57 	bl	8006e12 <USBD_CtlContinueRx>
 8005f64:	e038      	b.n	8005fd8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d105      	bne.n	8005f88 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 ff54 	bl	8006e36 <USBD_CtlSendStatus>
 8005f8e:	e023      	b.n	8005fd8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d11e      	bne.n	8005fd8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f001 fb71 	bl	800768c <USBD_LL_StallEP>
 8005faa:	e015      	b.n	8005fd8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00d      	beq.n	8005fd4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d108      	bne.n	8005fd4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	7afa      	ldrb	r2, [r7, #11]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	4798      	blx	r3
 8005fd2:	e001      	b.n	8005fd8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e000      	b.n	8005fda <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b086      	sub	sp, #24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	460b      	mov	r3, r1
 8005fec:	607a      	str	r2, [r7, #4]
 8005fee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ff0:	7afb      	ldrb	r3, [r7, #11]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d17f      	bne.n	80060f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006002:	2b02      	cmp	r3, #2
 8006004:	d15c      	bne.n	80060c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	429a      	cmp	r2, r3
 8006010:	d915      	bls.n	800603e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	1ad2      	subs	r2, r2, r3
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	b29b      	uxth	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fec1 	bl	8006db2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006030:	2300      	movs	r3, #0
 8006032:	2200      	movs	r2, #0
 8006034:	2100      	movs	r1, #0
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f001 fbd4 	bl	80077e4 <USBD_LL_PrepareReceive>
 800603c:	e04e      	b.n	80060dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	6912      	ldr	r2, [r2, #16]
 8006046:	fbb3 f1f2 	udiv	r1, r3, r2
 800604a:	fb01 f202 	mul.w	r2, r1, r2
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11c      	bne.n	800608e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800605c:	429a      	cmp	r2, r3
 800605e:	d316      	bcc.n	800608e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800606a:	429a      	cmp	r2, r3
 800606c:	d20f      	bcs.n	800608e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800606e:	2200      	movs	r2, #0
 8006070:	2100      	movs	r1, #0
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fe9d 	bl	8006db2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006080:	2300      	movs	r3, #0
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f001 fbac 	bl	80077e4 <USBD_LL_PrepareReceive>
 800608c:	e026      	b.n	80060dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d105      	bne.n	80060b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80060b0:	2180      	movs	r1, #128	; 0x80
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f001 faea 	bl	800768c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fecf 	bl	8006e5c <USBD_CtlReceiveStatus>
 80060be:	e00d      	b.n	80060dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d004      	beq.n	80060d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80060d4:	2180      	movs	r1, #128	; 0x80
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f001 fad8 	bl	800768c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d11d      	bne.n	8006122 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7ff fe81 	bl	8005dee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060f4:	e015      	b.n	8006122 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006108:	2b03      	cmp	r3, #3
 800610a:	d108      	bne.n	800611e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	7afa      	ldrb	r2, [r7, #11]
 8006116:	4611      	mov	r1, r2
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	4798      	blx	r3
 800611c:	e001      	b.n	8006122 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800611e:	2302      	movs	r3, #2
 8006120:	e000      	b.n	8006124 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006134:	2340      	movs	r3, #64	; 0x40
 8006136:	2200      	movs	r2, #0
 8006138:	2100      	movs	r1, #0
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 fa61 	bl	8007602 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2240      	movs	r2, #64	; 0x40
 800614c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006150:	2340      	movs	r3, #64	; 0x40
 8006152:	2200      	movs	r2, #0
 8006154:	2180      	movs	r1, #128	; 0x80
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 fa53 	bl	8007602 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2240      	movs	r2, #64	; 0x40
 8006166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6852      	ldr	r2, [r2, #4]
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	4611      	mov	r1, r2
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
  }

  return USBD_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr

080061cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2204      	movs	r2, #4
 80061e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr

080061f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006202:	2b04      	cmp	r3, #4
 8006204:	d105      	bne.n	8006212 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr

0800621e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622c:	2b03      	cmp	r3, #3
 800622e:	d10b      	bne.n	8006248 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d005      	beq.n	800627a <USBD_StdDevReq+0x26>
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d84f      	bhi.n	8006312 <USBD_StdDevReq+0xbe>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <USBD_StdDevReq+0x36>
 8006276:	2b20      	cmp	r3, #32
 8006278:	d14b      	bne.n	8006312 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
      break;
 8006288:	e048      	b.n	800631c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b09      	cmp	r3, #9
 8006290:	d839      	bhi.n	8006306 <USBD_StdDevReq+0xb2>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <USBD_StdDevReq+0x44>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062e9 	.word	0x080062e9
 800629c:	080062fd 	.word	0x080062fd
 80062a0:	08006307 	.word	0x08006307
 80062a4:	080062f3 	.word	0x080062f3
 80062a8:	08006307 	.word	0x08006307
 80062ac:	080062cb 	.word	0x080062cb
 80062b0:	080062c1 	.word	0x080062c1
 80062b4:	08006307 	.word	0x08006307
 80062b8:	080062df 	.word	0x080062df
 80062bc:	080062d5 	.word	0x080062d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9dc 	bl	8006680 <USBD_GetDescriptor>
          break;
 80062c8:	e022      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fb3f 	bl	8006950 <USBD_SetAddress>
          break;
 80062d2:	e01d      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fb7e 	bl	80069d8 <USBD_SetConfig>
          break;
 80062dc:	e018      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fc07 	bl	8006af4 <USBD_GetConfig>
          break;
 80062e6:	e013      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fc37 	bl	8006b5e <USBD_GetStatus>
          break;
 80062f0:	e00e      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fc65 	bl	8006bc4 <USBD_SetFeature>
          break;
 80062fa:	e009      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fc74 	bl	8006bec <USBD_ClrFeature>
          break;
 8006304:	e004      	b.n	8006310 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fccc 	bl	8006ca6 <USBD_CtlError>
          break;
 800630e:	bf00      	nop
      }
      break;
 8006310:	e004      	b.n	800631c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fcc6 	bl	8006ca6 <USBD_CtlError>
      break;
 800631a:	bf00      	nop
  }

  return ret;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop

08006328 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d005      	beq.n	800634e <USBD_StdItfReq+0x26>
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d82e      	bhi.n	80063a4 <USBD_StdItfReq+0x7c>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <USBD_StdItfReq+0x26>
 800634a:	2b20      	cmp	r3, #32
 800634c:	d12a      	bne.n	80063a4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006354:	3b01      	subs	r3, #1
 8006356:	2b02      	cmp	r3, #2
 8006358:	d81d      	bhi.n	8006396 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	889b      	ldrh	r3, [r3, #4]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	d813      	bhi.n	800638c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
 8006372:	4603      	mov	r3, r0
 8006374:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	88db      	ldrh	r3, [r3, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d110      	bne.n	80063a0 <USBD_StdItfReq+0x78>
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10d      	bne.n	80063a0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fd56 	bl	8006e36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800638a:	e009      	b.n	80063a0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fc89 	bl	8006ca6 <USBD_CtlError>
          break;
 8006394:	e004      	b.n	80063a0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fc84 	bl	8006ca6 <USBD_CtlError>
          break;
 800639e:	e000      	b.n	80063a2 <USBD_StdItfReq+0x7a>
          break;
 80063a0:	bf00      	nop
      }
      break;
 80063a2:	e004      	b.n	80063ae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fc7d 	bl	8006ca6 <USBD_CtlError>
      break;
 80063ac:	bf00      	nop
  }

  return USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	889b      	ldrh	r3, [r3, #4]
 80063ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d007      	beq.n	80063e8 <USBD_StdEPReq+0x30>
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	f200 8146 	bhi.w	800666a <USBD_StdEPReq+0x2b2>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <USBD_StdEPReq+0x40>
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	f040 8141 	bne.w	800666a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
      break;
 80063f6:	e13d      	b.n	8006674 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006400:	2b20      	cmp	r3, #32
 8006402:	d10a      	bne.n	800641a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
 8006412:	4603      	mov	r3, r0
 8006414:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	e12d      	b.n	8006676 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	2b03      	cmp	r3, #3
 8006420:	d007      	beq.n	8006432 <USBD_StdEPReq+0x7a>
 8006422:	2b03      	cmp	r3, #3
 8006424:	f300 811b 	bgt.w	800665e <USBD_StdEPReq+0x2a6>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d072      	beq.n	8006512 <USBD_StdEPReq+0x15a>
 800642c:	2b01      	cmp	r3, #1
 800642e:	d03a      	beq.n	80064a6 <USBD_StdEPReq+0xee>
 8006430:	e115      	b.n	800665e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006438:	2b02      	cmp	r3, #2
 800643a:	d002      	beq.n	8006442 <USBD_StdEPReq+0x8a>
 800643c:	2b03      	cmp	r3, #3
 800643e:	d015      	beq.n	800646c <USBD_StdEPReq+0xb4>
 8006440:	e02b      	b.n	800649a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00c      	beq.n	8006462 <USBD_StdEPReq+0xaa>
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	2b80      	cmp	r3, #128	; 0x80
 800644c:	d009      	beq.n	8006462 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 f91a 	bl	800768c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006458:	2180      	movs	r1, #128	; 0x80
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 f916 	bl	800768c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006460:	e020      	b.n	80064a4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fc1e 	bl	8006ca6 <USBD_CtlError>
              break;
 800646a:	e01b      	b.n	80064a4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	885b      	ldrh	r3, [r3, #2]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10e      	bne.n	8006492 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <USBD_StdEPReq+0xda>
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	2b80      	cmp	r3, #128	; 0x80
 800647e:	d008      	beq.n	8006492 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	88db      	ldrh	r3, [r3, #6]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 f8fd 	bl	800768c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fccf 	bl	8006e36 <USBD_CtlSendStatus>

              break;
 8006498:	e004      	b.n	80064a4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fc02 	bl	8006ca6 <USBD_CtlError>
              break;
 80064a2:	bf00      	nop
          }
          break;
 80064a4:	e0e0      	b.n	8006668 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d002      	beq.n	80064b6 <USBD_StdEPReq+0xfe>
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d015      	beq.n	80064e0 <USBD_StdEPReq+0x128>
 80064b4:	e026      	b.n	8006504 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00c      	beq.n	80064d6 <USBD_StdEPReq+0x11e>
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b80      	cmp	r3, #128	; 0x80
 80064c0:	d009      	beq.n	80064d6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 f8e0 	bl	800768c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 f8dc 	bl	800768c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064d4:	e01c      	b.n	8006510 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fbe4 	bl	8006ca6 <USBD_CtlError>
              break;
 80064de:	e017      	b.n	8006510 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	885b      	ldrh	r3, [r3, #2]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d112      	bne.n	800650e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 f8e7 	bl	80076ca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fc9a 	bl	8006e36 <USBD_CtlSendStatus>
              }
              break;
 8006502:	e004      	b.n	800650e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fbcd 	bl	8006ca6 <USBD_CtlError>
              break;
 800650c:	e000      	b.n	8006510 <USBD_StdEPReq+0x158>
              break;
 800650e:	bf00      	nop
          }
          break;
 8006510:	e0aa      	b.n	8006668 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006518:	2b02      	cmp	r3, #2
 800651a:	d002      	beq.n	8006522 <USBD_StdEPReq+0x16a>
 800651c:	2b03      	cmp	r3, #3
 800651e:	d032      	beq.n	8006586 <USBD_StdEPReq+0x1ce>
 8006520:	e097      	b.n	8006652 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <USBD_StdEPReq+0x180>
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b80      	cmp	r3, #128	; 0x80
 800652c:	d004      	beq.n	8006538 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fbb8 	bl	8006ca6 <USBD_CtlError>
                break;
 8006536:	e091      	b.n	800665c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800653c:	2b00      	cmp	r3, #0
 800653e:	da0b      	bge.n	8006558 <USBD_StdEPReq+0x1a0>
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	3310      	adds	r3, #16
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	3304      	adds	r3, #4
 8006556:	e00b      	b.n	8006570 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006558:	7bbb      	ldrb	r3, [r7, #14]
 800655a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	4413      	add	r3, r2
 800656e:	3304      	adds	r3, #4
 8006570:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2202      	movs	r2, #2
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fbfb 	bl	8006d7a <USBD_CtlSendData>
              break;
 8006584:	e06a      	b.n	800665c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800658a:	2b00      	cmp	r3, #0
 800658c:	da11      	bge.n	80065b2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800658e:	7bbb      	ldrb	r3, [r7, #14]
 8006590:	f003 020f 	and.w	r2, r3, #15
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	3318      	adds	r3, #24
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d117      	bne.n	80065d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fb7b 	bl	8006ca6 <USBD_CtlError>
                  break;
 80065b0:	e054      	b.n	800665c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	f003 020f 	and.w	r2, r3, #15
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fb68 	bl	8006ca6 <USBD_CtlError>
                  break;
 80065d6:	e041      	b.n	800665c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	da0b      	bge.n	80065f8 <USBD_StdEPReq+0x240>
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	3310      	adds	r3, #16
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	4413      	add	r3, r2
 80065f4:	3304      	adds	r3, #4
 80065f6:	e00b      	b.n	8006610 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	3304      	adds	r3, #4
 8006610:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <USBD_StdEPReq+0x266>
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d103      	bne.n	8006626 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e00e      	b.n	8006644 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 f86c 	bl	8007708 <USBD_LL_IsStallEP>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2201      	movs	r2, #1
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e002      	b.n	8006644 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2202      	movs	r2, #2
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fb95 	bl	8006d7a <USBD_CtlSendData>
              break;
 8006650:	e004      	b.n	800665c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fb26 	bl	8006ca6 <USBD_CtlError>
              break;
 800665a:	bf00      	nop
          }
          break;
 800665c:	e004      	b.n	8006668 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fb20 	bl	8006ca6 <USBD_CtlError>
          break;
 8006666:	bf00      	nop
      }
      break;
 8006668:	e004      	b.n	8006674 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fb1a 	bl	8006ca6 <USBD_CtlError>
      break;
 8006672:	bf00      	nop
  }

  return ret;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	885b      	ldrh	r3, [r3, #2]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	2b06      	cmp	r3, #6
 80066a2:	f200 8128 	bhi.w	80068f6 <USBD_GetDescriptor+0x276>
 80066a6:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <USBD_GetDescriptor+0x2c>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	080066c9 	.word	0x080066c9
 80066b0:	080066e1 	.word	0x080066e1
 80066b4:	08006721 	.word	0x08006721
 80066b8:	080068f7 	.word	0x080068f7
 80066bc:	080068f7 	.word	0x080068f7
 80066c0:	08006897 	.word	0x08006897
 80066c4:	080068c3 	.word	0x080068c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	7c12      	ldrb	r2, [r2, #16]
 80066d4:	f107 0108 	add.w	r1, r7, #8
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
 80066dc:	60f8      	str	r0, [r7, #12]
      break;
 80066de:	e112      	b.n	8006906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	7c1b      	ldrb	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10d      	bne.n	8006704 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	f107 0208 	add.w	r2, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	2202      	movs	r2, #2
 8006700:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006702:	e100      	b.n	8006906 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	f107 0208 	add.w	r2, r7, #8
 8006710:	4610      	mov	r0, r2
 8006712:	4798      	blx	r3
 8006714:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	2202      	movs	r2, #2
 800671c:	701a      	strb	r2, [r3, #0]
      break;
 800671e:	e0f2      	b.n	8006906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	885b      	ldrh	r3, [r3, #2]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b05      	cmp	r3, #5
 8006728:	f200 80ac 	bhi.w	8006884 <USBD_GetDescriptor+0x204>
 800672c:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <USBD_GetDescriptor+0xb4>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	0800674d 	.word	0x0800674d
 8006738:	08006781 	.word	0x08006781
 800673c:	080067b5 	.word	0x080067b5
 8006740:	080067e9 	.word	0x080067e9
 8006744:	0800681d 	.word	0x0800681d
 8006748:	08006851 	.word	0x08006851
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	7c12      	ldrb	r2, [r2, #16]
 8006764:	f107 0108 	add.w	r1, r7, #8
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800676e:	e091      	b.n	8006894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa97 	bl	8006ca6 <USBD_CtlError>
            err++;
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	3301      	adds	r3, #1
 800677c:	72fb      	strb	r3, [r7, #11]
          break;
 800677e:	e089      	b.n	8006894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	7c12      	ldrb	r2, [r2, #16]
 8006798:	f107 0108 	add.w	r1, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067a2:	e077      	b.n	8006894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa7d 	bl	8006ca6 <USBD_CtlError>
            err++;
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	3301      	adds	r3, #1
 80067b0:	72fb      	strb	r3, [r7, #11]
          break;
 80067b2:	e06f      	b.n	8006894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00b      	beq.n	80067d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	7c12      	ldrb	r2, [r2, #16]
 80067cc:	f107 0108 	add.w	r1, r7, #8
 80067d0:	4610      	mov	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067d6:	e05d      	b.n	8006894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa63 	bl	8006ca6 <USBD_CtlError>
            err++;
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	3301      	adds	r3, #1
 80067e4:	72fb      	strb	r3, [r7, #11]
          break;
 80067e6:	e055      	b.n	8006894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	7c12      	ldrb	r2, [r2, #16]
 8006800:	f107 0108 	add.w	r1, r7, #8
 8006804:	4610      	mov	r0, r2
 8006806:	4798      	blx	r3
 8006808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800680a:	e043      	b.n	8006894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa49 	bl	8006ca6 <USBD_CtlError>
            err++;
 8006814:	7afb      	ldrb	r3, [r7, #11]
 8006816:	3301      	adds	r3, #1
 8006818:	72fb      	strb	r3, [r7, #11]
          break;
 800681a:	e03b      	b.n	8006894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7c12      	ldrb	r2, [r2, #16]
 8006834:	f107 0108 	add.w	r1, r7, #8
 8006838:	4610      	mov	r0, r2
 800683a:	4798      	blx	r3
 800683c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800683e:	e029      	b.n	8006894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa2f 	bl	8006ca6 <USBD_CtlError>
            err++;
 8006848:	7afb      	ldrb	r3, [r7, #11]
 800684a:	3301      	adds	r3, #1
 800684c:	72fb      	strb	r3, [r7, #11]
          break;
 800684e:	e021      	b.n	8006894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7c12      	ldrb	r2, [r2, #16]
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006872:	e00f      	b.n	8006894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa15 	bl	8006ca6 <USBD_CtlError>
            err++;
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	3301      	adds	r3, #1
 8006880:	72fb      	strb	r3, [r7, #11]
          break;
 8006882:	e007      	b.n	8006894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa0d 	bl	8006ca6 <USBD_CtlError>
          err++;
 800688c:	7afb      	ldrb	r3, [r7, #11]
 800688e:	3301      	adds	r3, #1
 8006890:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006892:	e038      	b.n	8006906 <USBD_GetDescriptor+0x286>
 8006894:	e037      	b.n	8006906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	7c1b      	ldrb	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	f107 0208 	add.w	r2, r7, #8
 80068aa:	4610      	mov	r0, r2
 80068ac:	4798      	blx	r3
 80068ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068b0:	e029      	b.n	8006906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f9f6 	bl	8006ca6 <USBD_CtlError>
        err++;
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	3301      	adds	r3, #1
 80068be:	72fb      	strb	r3, [r7, #11]
      break;
 80068c0:	e021      	b.n	8006906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	7c1b      	ldrb	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10d      	bne.n	80068e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	f107 0208 	add.w	r2, r7, #8
 80068d6:	4610      	mov	r0, r2
 80068d8:	4798      	blx	r3
 80068da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	2207      	movs	r2, #7
 80068e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068e4:	e00f      	b.n	8006906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f9dc 	bl	8006ca6 <USBD_CtlError>
        err++;
 80068ee:	7afb      	ldrb	r3, [r7, #11]
 80068f0:	3301      	adds	r3, #1
 80068f2:	72fb      	strb	r3, [r7, #11]
      break;
 80068f4:	e007      	b.n	8006906 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f9d4 	bl	8006ca6 <USBD_CtlError>
      err++;
 80068fe:	7afb      	ldrb	r3, [r7, #11]
 8006900:	3301      	adds	r3, #1
 8006902:	72fb      	strb	r3, [r7, #11]
      break;
 8006904:	bf00      	nop
  }

  if (err != 0U)
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d11c      	bne.n	8006946 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800690c:	893b      	ldrh	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d011      	beq.n	8006936 <USBD_GetDescriptor+0x2b6>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	88db      	ldrh	r3, [r3, #6]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00d      	beq.n	8006936 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	88da      	ldrh	r2, [r3, #6]
 800691e:	893b      	ldrh	r3, [r7, #8]
 8006920:	4293      	cmp	r3, r2
 8006922:	bf28      	it	cs
 8006924:	4613      	movcs	r3, r2
 8006926:	b29b      	uxth	r3, r3
 8006928:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800692a:	893b      	ldrh	r3, [r7, #8]
 800692c:	461a      	mov	r2, r3
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fa22 	bl	8006d7a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	88db      	ldrh	r3, [r3, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa79 	bl	8006e36 <USBD_CtlSendStatus>
 8006944:	e000      	b.n	8006948 <USBD_GetDescriptor+0x2c8>
    return;
 8006946:	bf00      	nop
    }
  }
}
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop

08006950 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	889b      	ldrh	r3, [r3, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d130      	bne.n	80069c4 <USBD_SetAddress+0x74>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d12c      	bne.n	80069c4 <USBD_SetAddress+0x74>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	885b      	ldrh	r3, [r3, #2]
 800696e:	2b7f      	cmp	r3, #127	; 0x7f
 8006970:	d828      	bhi.n	80069c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	885b      	ldrh	r3, [r3, #2]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006984:	2b03      	cmp	r3, #3
 8006986:	d104      	bne.n	8006992 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f98b 	bl	8006ca6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006990:	e01d      	b.n	80069ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	7bfa      	ldrb	r2, [r7, #15]
 8006996:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fede 	bl	8007760 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fa46 	bl	8006e36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b8:	e009      	b.n	80069ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	e004      	b.n	80069ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f96d 	bl	8006ca6 <USBD_CtlError>
  }
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	885b      	ldrh	r3, [r3, #2]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	4b41      	ldr	r3, [pc, #260]	; (8006af0 <USBD_SetConfig+0x118>)
 80069ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069ec:	4b40      	ldr	r3, [pc, #256]	; (8006af0 <USBD_SetConfig+0x118>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d904      	bls.n	80069fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f955 	bl	8006ca6 <USBD_CtlError>
 80069fc:	e075      	b.n	8006aea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d002      	beq.n	8006a0e <USBD_SetConfig+0x36>
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d023      	beq.n	8006a54 <USBD_SetConfig+0x7c>
 8006a0c:	e062      	b.n	8006ad4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006a0e:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <USBD_SetConfig+0x118>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d01a      	beq.n	8006a4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006a16:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <USBD_SetConfig+0x118>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2203      	movs	r2, #3
 8006a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a28:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <USBD_SetConfig+0x118>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff f9e7 	bl	8005e02 <USBD_SetClassConfig>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d104      	bne.n	8006a44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f932 	bl	8006ca6 <USBD_CtlError>
            return;
 8006a42:	e052      	b.n	8006aea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9f6 	bl	8006e36 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a4a:	e04e      	b.n	8006aea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f9f2 	bl	8006e36 <USBD_CtlSendStatus>
        break;
 8006a52:	e04a      	b.n	8006aea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a54:	4b26      	ldr	r3, [pc, #152]	; (8006af0 <USBD_SetConfig+0x118>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d112      	bne.n	8006a82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006a64:	4b22      	ldr	r3, [pc, #136]	; (8006af0 <USBD_SetConfig+0x118>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a6e:	4b20      	ldr	r3, [pc, #128]	; (8006af0 <USBD_SetConfig+0x118>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff f9e3 	bl	8005e40 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f9db 	bl	8006e36 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a80:	e033      	b.n	8006aea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a82:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <USBD_SetConfig+0x118>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d01d      	beq.n	8006acc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff f9d1 	bl	8005e40 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a9e:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <USBD_SetConfig+0x118>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006aa8:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <USBD_SetConfig+0x118>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff f9a7 	bl	8005e02 <USBD_SetClassConfig>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d104      	bne.n	8006ac4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f8f2 	bl	8006ca6 <USBD_CtlError>
            return;
 8006ac2:	e012      	b.n	8006aea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f9b6 	bl	8006e36 <USBD_CtlSendStatus>
        break;
 8006aca:	e00e      	b.n	8006aea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f9b2 	bl	8006e36 <USBD_CtlSendStatus>
        break;
 8006ad2:	e00a      	b.n	8006aea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8e5 	bl	8006ca6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006adc:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <USBD_SetConfig+0x118>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff f9ac 	bl	8005e40 <USBD_ClrClassConfig>
        break;
 8006ae8:	bf00      	nop
    }
  }
}
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	200001f4 	.word	0x200001f4

08006af4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	88db      	ldrh	r3, [r3, #6]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d004      	beq.n	8006b10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f8cc 	bl	8006ca6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b0e:	e022      	b.n	8006b56 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	dc02      	bgt.n	8006b20 <USBD_GetConfig+0x2c>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dc03      	bgt.n	8006b26 <USBD_GetConfig+0x32>
 8006b1e:	e015      	b.n	8006b4c <USBD_GetConfig+0x58>
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d00b      	beq.n	8006b3c <USBD_GetConfig+0x48>
 8006b24:	e012      	b.n	8006b4c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	2201      	movs	r2, #1
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f920 	bl	8006d7a <USBD_CtlSendData>
        break;
 8006b3a:	e00c      	b.n	8006b56 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	2201      	movs	r2, #1
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f918 	bl	8006d7a <USBD_CtlSendData>
        break;
 8006b4a:	e004      	b.n	8006b56 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f8a9 	bl	8006ca6 <USBD_CtlError>
        break;
 8006b54:	bf00      	nop
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d81e      	bhi.n	8006bb2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	88db      	ldrh	r3, [r3, #6]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d004      	beq.n	8006b86 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f891 	bl	8006ca6 <USBD_CtlError>
        break;
 8006b84:	e01a      	b.n	8006bbc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f043 0202 	orr.w	r2, r3, #2
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f8e5 	bl	8006d7a <USBD_CtlSendData>
      break;
 8006bb0:	e004      	b.n	8006bbc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f876 	bl	8006ca6 <USBD_CtlError>
      break;
 8006bba:	bf00      	nop
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d106      	bne.n	8006be4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f929 	bl	8006e36 <USBD_CtlSendStatus>
  }
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d80b      	bhi.n	8006c1a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10c      	bne.n	8006c24 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f90f 	bl	8006e36 <USBD_CtlSendStatus>
      }
      break;
 8006c18:	e004      	b.n	8006c24 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f842 	bl	8006ca6 <USBD_CtlError>
      break;
 8006c22:	e000      	b.n	8006c26 <USBD_ClrFeature+0x3a>
      break;
 8006c24:	bf00      	nop
  }
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	785a      	ldrb	r2, [r3, #1]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	3303      	adds	r3, #3
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	3304      	adds	r3, #4
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	3305      	adds	r3, #5
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	4413      	add	r3, r2
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	3306      	adds	r3, #6
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	3307      	adds	r3, #7
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4413      	add	r3, r2
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	80da      	strh	r2, [r3, #6]

}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006cb0:	2180      	movs	r1, #128	; 0x80
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fcea 	bl	800768c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fce6 	bl	800768c <USBD_LL_StallEP>
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d032      	beq.n	8006d44 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f834 	bl	8006d4c <USBD_GetLen>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	75fa      	strb	r2, [r7, #23]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	7812      	ldrb	r2, [r2, #0]
 8006d02:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	75fa      	strb	r2, [r7, #23]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4413      	add	r3, r2
 8006d10:	2203      	movs	r2, #3
 8006d12:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006d14:	e012      	b.n	8006d3c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	60fa      	str	r2, [r7, #12]
 8006d1c:	7dfa      	ldrb	r2, [r7, #23]
 8006d1e:	1c51      	adds	r1, r2, #1
 8006d20:	75f9      	strb	r1, [r7, #23]
 8006d22:	4611      	mov	r1, r2
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	440a      	add	r2, r1
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	75fa      	strb	r2, [r7, #23]
 8006d32:	461a      	mov	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4413      	add	r3, r2
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e8      	bne.n	8006d16 <USBD_GetString+0x4e>
    }
  }
}
 8006d44:	bf00      	nop
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d58:	e005      	b.n	8006d66 <USBD_GetLen+0x1a>
  {
    len++;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3301      	adds	r3, #1
 8006d64:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f5      	bne.n	8006d5a <USBD_GetLen+0xe>
  }

  return len;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr

08006d7a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	4613      	mov	r3, r2
 8006d86:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d90:	88fa      	ldrh	r2, [r7, #6]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	2100      	movs	r1, #0
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fcfb 	bl	800779e <USBD_LL_Transmit>

  return USBD_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fce9 	bl	800779e <USBD_LL_Transmit>

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	4613      	mov	r3, r2
 8006de2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2203      	movs	r2, #3
 8006de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006dec:	88fa      	ldrh	r2, [r7, #6]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006df4:	88fa      	ldrh	r2, [r7, #6]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	2100      	movs	r1, #0
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fcee 	bl	80077e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	2100      	movs	r1, #0
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 fcdc 	bl	80077e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2204      	movs	r2, #4
 8006e42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e46:	2300      	movs	r3, #0
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fca6 	bl	800779e <USBD_LL_Transmit>

  return USBD_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2205      	movs	r2, #5
 8006e68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2100      	movs	r1, #0
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fcb6 	bl	80077e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4912      	ldr	r1, [pc, #72]	; (8006ed4 <MX_USB_DEVICE_Init+0x50>)
 8006e8c:	4812      	ldr	r0, [pc, #72]	; (8006ed8 <MX_USB_DEVICE_Init+0x54>)
 8006e8e:	f7fe ff5e 	bl	8005d4e <USBD_Init>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e98:	f7f9 fa42 	bl	8000320 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e9c:	490f      	ldr	r1, [pc, #60]	; (8006edc <MX_USB_DEVICE_Init+0x58>)
 8006e9e:	480e      	ldr	r0, [pc, #56]	; (8006ed8 <MX_USB_DEVICE_Init+0x54>)
 8006ea0:	f7fe ff80 	bl	8005da4 <USBD_RegisterClass>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006eaa:	f7f9 fa39 	bl	8000320 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006eae:	490c      	ldr	r1, [pc, #48]	; (8006ee0 <MX_USB_DEVICE_Init+0x5c>)
 8006eb0:	4809      	ldr	r0, [pc, #36]	; (8006ed8 <MX_USB_DEVICE_Init+0x54>)
 8006eb2:	f7fe feb1 	bl	8005c18 <USBD_CDC_RegisterInterface>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ebc:	f7f9 fa30 	bl	8000320 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ec0:	4805      	ldr	r0, [pc, #20]	; (8006ed8 <MX_USB_DEVICE_Init+0x54>)
 8006ec2:	f7fe ff88 	bl	8005dd6 <USBD_Start>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ecc:	f7f9 fa28 	bl	8000320 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ed0:	bf00      	nop
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	2000012c 	.word	0x2000012c
 8006ed8:	200001f8 	.word	0x200001f8
 8006edc:	20000018 	.word	0x20000018
 8006ee0:	2000011c 	.word	0x2000011c

08006ee4 <cdcAvailable>:
uint32_t rx_in  = 0;
uint32_t rx_out = 0;
uint8_t rx_buf[RX_LEN];

uint32_t cdcAvailable(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % RX_LEN;
 8006eea:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <cdcAvailable+0x24>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <cdcAvailable+0x28>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef8:	607b      	str	r3, [r7, #4]

  return ret;
 8006efa:	687b      	ldr	r3, [r7, #4]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	200004bc 	.word	0x200004bc
 8006f0c:	200004c0 	.word	0x200004c0

08006f10 <cdcDataIn>:

void cdcDataIn(uint32_t rx_data)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <cdcDataIn+0x3c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	b2d1      	uxtb	r1, r2
 8006f20:	4a0b      	ldr	r2, [pc, #44]	; (8006f50 <cdcDataIn+0x40>)
 8006f22:	54d1      	strb	r1, [r2, r3]
  next_rx_in = (rx_in + 1) % RX_LEN;
 8006f24:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <cdcDataIn+0x3c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2e:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8006f30:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <cdcDataIn+0x44>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d002      	beq.n	8006f40 <cdcDataIn+0x30>
  {
    rx_in = next_rx_in;
 8006f3a:	4a04      	ldr	r2, [pc, #16]	; (8006f4c <cdcDataIn+0x3c>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6013      	str	r3, [r2, #0]
  }
}
 8006f40:	bf00      	nop
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	200004bc 	.word	0x200004bc
 8006f50:	200004c4 	.word	0x200004c4
 8006f54:	200004c0 	.word	0x200004c0

08006f58 <cdcRead>:

uint8_t cdcRead(void)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <cdcRead+0x38>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a0c      	ldr	r2, [pc, #48]	; (8006f94 <cdcRead+0x3c>)
 8006f64:	5cd3      	ldrb	r3, [r2, r3]
 8006f66:	71fb      	strb	r3, [r7, #7]

  if(rx_in != rx_out)
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <cdcRead+0x40>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <cdcRead+0x38>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d006      	beq.n	8006f82 <cdcRead+0x2a>
  {
    rx_out = (rx_out + 1) % RX_LEN;
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <cdcRead+0x38>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	4a04      	ldr	r2, [pc, #16]	; (8006f90 <cdcRead+0x38>)
 8006f80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f82:	79fb      	ldrb	r3, [r7, #7]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bc80      	pop	{r7}
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	200004c0 	.word	0x200004c0
 8006f94:	200004c4 	.word	0x200004c4
 8006f98:	200004bc 	.word	0x200004bc

08006f9c <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8006fa6:	f7f9 f907 	bl	80001b8 <millis>
 8006faa:	60f8      	str	r0, [r7, #12]

  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f8ba 	bl	800712c <CDC_Transmit_FS>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	72fb      	strb	r3, [r7, #11]

    if (ret == USBD_OK)
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <cdcWrite+0x2a>
    {
      return length;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	e00e      	b.n	8006fe4 <cdcWrite+0x48>
    }
    else if (ret == USBD_FAIL)
 8006fc6:	7afb      	ldrb	r3, [r7, #11]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d101      	bne.n	8006fd0 <cdcWrite+0x34>
    {
      return 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e009      	b.n	8006fe4 <cdcWrite+0x48>
    }

    if (millis() - pre_time >= 100)
 8006fd0:	f7f9 f8f2 	bl	80001b8 <millis>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b63      	cmp	r3, #99	; 0x63
 8006fdc:	d800      	bhi.n	8006fe0 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8006fde:	e7e5      	b.n	8006fac <cdcWrite+0x10>
    {
      break;
 8006fe0:	bf00      	nop
    }
  }
  return 0;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4905      	ldr	r1, [pc, #20]	; (8007008 <CDC_Init_FS+0x1c>)
 8006ff4:	4805      	ldr	r0, [pc, #20]	; (800700c <CDC_Init_FS+0x20>)
 8006ff6:	f7fe fe25 	bl	8005c44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ffa:	4905      	ldr	r1, [pc, #20]	; (8007010 <CDC_Init_FS+0x24>)
 8006ffc:	4803      	ldr	r0, [pc, #12]	; (800700c <CDC_Init_FS+0x20>)
 8006ffe:	f7fe fe3a 	bl	8005c76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007002:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007004:	4618      	mov	r0, r3
 8007006:	bd80      	pop	{r7, pc}
 8007008:	200008c4 	.word	0x200008c4
 800700c:	200001f8 	.word	0x200001f8
 8007010:	200006c4 	.word	0x200006c4

08007014 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007018:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800701a:	4618      	mov	r0, r3
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
	...

08007024 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
 8007030:	4613      	mov	r3, r2
 8007032:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b23      	cmp	r3, #35	; 0x23
 8007038:	d84a      	bhi.n	80070d0 <CDC_Control_FS+0xac>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <CDC_Control_FS+0x1c>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	080070d1 	.word	0x080070d1
 8007044:	080070d1 	.word	0x080070d1
 8007048:	080070d1 	.word	0x080070d1
 800704c:	080070d1 	.word	0x080070d1
 8007050:	080070d1 	.word	0x080070d1
 8007054:	080070d1 	.word	0x080070d1
 8007058:	080070d1 	.word	0x080070d1
 800705c:	080070d1 	.word	0x080070d1
 8007060:	080070d1 	.word	0x080070d1
 8007064:	080070d1 	.word	0x080070d1
 8007068:	080070d1 	.word	0x080070d1
 800706c:	080070d1 	.word	0x080070d1
 8007070:	080070d1 	.word	0x080070d1
 8007074:	080070d1 	.word	0x080070d1
 8007078:	080070d1 	.word	0x080070d1
 800707c:	080070d1 	.word	0x080070d1
 8007080:	080070d1 	.word	0x080070d1
 8007084:	080070d1 	.word	0x080070d1
 8007088:	080070d1 	.word	0x080070d1
 800708c:	080070d1 	.word	0x080070d1
 8007090:	080070d1 	.word	0x080070d1
 8007094:	080070d1 	.word	0x080070d1
 8007098:	080070d1 	.word	0x080070d1
 800709c:	080070d1 	.word	0x080070d1
 80070a0:	080070d1 	.word	0x080070d1
 80070a4:	080070d1 	.word	0x080070d1
 80070a8:	080070d1 	.word	0x080070d1
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	080070d1 	.word	0x080070d1
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	080070d1 	.word	0x080070d1
 80070bc:	080070d1 	.word	0x080070d1
 80070c0:	080070d1 	.word	0x080070d1
 80070c4:	080070d1 	.word	0x080070d1
 80070c8:	080070d1 	.word	0x080070d1
 80070cc:	080070d1 	.word	0x080070d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80070d0:	bf00      	nop
  }

  return (USBD_OK);
 80070d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	bc80      	pop	{r7}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop

080070e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	480e      	ldr	r0, [pc, #56]	; (8007128 <CDC_Receive_FS+0x48>)
 80070ee:	f7fe fdc2 	bl	8005c76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80070f2:	480d      	ldr	r0, [pc, #52]	; (8007128 <CDC_Receive_FS+0x48>)
 80070f4:	f7fe fe01 	bl	8005cfa <USBD_CDC_ReceivePacket>

  for (int i = 0; i < *Len; i++)
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	e009      	b.n	8007112 <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff ff02 	bl	8006f10 <cdcDataIn>
  for (int i = 0; i < *Len; i++)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	429a      	cmp	r2, r3
 800711a:	d8f0      	bhi.n	80070fe <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 800711c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200001f8 	.word	0x200001f8

0800712c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800713c:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <CDC_Transmit_FS+0x48>)
 800713e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007142:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800714e:	2301      	movs	r3, #1
 8007150:	e00b      	b.n	800716a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007152:	887b      	ldrh	r3, [r7, #2]
 8007154:	461a      	mov	r2, r3
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	4806      	ldr	r0, [pc, #24]	; (8007174 <CDC_Transmit_FS+0x48>)
 800715a:	f7fe fd73 	bl	8005c44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800715e:	4805      	ldr	r0, [pc, #20]	; (8007174 <CDC_Transmit_FS+0x48>)
 8007160:	f7fe fd9c 	bl	8005c9c <USBD_CDC_TransmitPacket>
 8007164:	4603      	mov	r3, r0
 8007166:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007168:	7bfb      	ldrb	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	200001f8 	.word	0x200001f8

08007178 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2212      	movs	r2, #18
 8007188:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800718a:	4b03      	ldr	r3, [pc, #12]	; (8007198 <USBD_FS_DeviceDescriptor+0x20>)
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20000148 	.word	0x20000148

0800719c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	6039      	str	r1, [r7, #0]
 80071a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2204      	movs	r2, #4
 80071ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071ae:	4b03      	ldr	r3, [pc, #12]	; (80071bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	2000015c 	.word	0x2000015c

080071c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	6039      	str	r1, [r7, #0]
 80071ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d105      	bne.n	80071de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	4907      	ldr	r1, [pc, #28]	; (80071f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80071d6:	4808      	ldr	r0, [pc, #32]	; (80071f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80071d8:	f7ff fd76 	bl	8006cc8 <USBD_GetString>
 80071dc:	e004      	b.n	80071e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	4904      	ldr	r1, [pc, #16]	; (80071f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80071e2:	4805      	ldr	r0, [pc, #20]	; (80071f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80071e4:	f7ff fd70 	bl	8006cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071e8:	4b02      	ldr	r3, [pc, #8]	; (80071f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000ac4 	.word	0x20000ac4
 80071f8:	080082c0 	.word	0x080082c0

080071fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	6039      	str	r1, [r7, #0]
 8007206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	4904      	ldr	r1, [pc, #16]	; (800721c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800720c:	4804      	ldr	r0, [pc, #16]	; (8007220 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800720e:	f7ff fd5b 	bl	8006cc8 <USBD_GetString>
  return USBD_StrDesc;
 8007212:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000ac4 	.word	0x20000ac4
 8007220:	080082d8 	.word	0x080082d8

08007224 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	6039      	str	r1, [r7, #0]
 800722e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	221a      	movs	r2, #26
 8007234:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007236:	f000 f843 	bl	80072c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800723a:	4b02      	ldr	r3, [pc, #8]	; (8007244 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000160 	.word	0x20000160

08007248 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	6039      	str	r1, [r7, #0]
 8007252:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d105      	bne.n	8007266 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4907      	ldr	r1, [pc, #28]	; (800727c <USBD_FS_ConfigStrDescriptor+0x34>)
 800725e:	4808      	ldr	r0, [pc, #32]	; (8007280 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007260:	f7ff fd32 	bl	8006cc8 <USBD_GetString>
 8007264:	e004      	b.n	8007270 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	4904      	ldr	r1, [pc, #16]	; (800727c <USBD_FS_ConfigStrDescriptor+0x34>)
 800726a:	4805      	ldr	r0, [pc, #20]	; (8007280 <USBD_FS_ConfigStrDescriptor+0x38>)
 800726c:	f7ff fd2c 	bl	8006cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007270:	4b02      	ldr	r3, [pc, #8]	; (800727c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000ac4 	.word	0x20000ac4
 8007280:	080082ec 	.word	0x080082ec

08007284 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	6039      	str	r1, [r7, #0]
 800728e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d105      	bne.n	80072a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	4907      	ldr	r1, [pc, #28]	; (80072b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800729a:	4808      	ldr	r0, [pc, #32]	; (80072bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800729c:	f7ff fd14 	bl	8006cc8 <USBD_GetString>
 80072a0:	e004      	b.n	80072ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	4904      	ldr	r1, [pc, #16]	; (80072b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072a6:	4805      	ldr	r0, [pc, #20]	; (80072bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072a8:	f7ff fd0e 	bl	8006cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000ac4 	.word	0x20000ac4
 80072bc:	080082f8 	.word	0x080082f8

080072c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <Get_SerialNum+0x44>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <Get_SerialNum+0x48>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072d2:	4b0e      	ldr	r3, [pc, #56]	; (800730c <Get_SerialNum+0x4c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4413      	add	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d009      	beq.n	80072fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072e6:	2208      	movs	r2, #8
 80072e8:	4909      	ldr	r1, [pc, #36]	; (8007310 <Get_SerialNum+0x50>)
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 f814 	bl	8007318 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072f0:	2204      	movs	r2, #4
 80072f2:	4908      	ldr	r1, [pc, #32]	; (8007314 <Get_SerialNum+0x54>)
 80072f4:	68b8      	ldr	r0, [r7, #8]
 80072f6:	f000 f80f 	bl	8007318 <IntToUnicode>
  }
}
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	1ffff7e8 	.word	0x1ffff7e8
 8007308:	1ffff7ec 	.word	0x1ffff7ec
 800730c:	1ffff7f0 	.word	0x1ffff7f0
 8007310:	20000162 	.word	0x20000162
 8007314:	20000172 	.word	0x20000172

08007318 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]
 800732e:	e027      	b.n	8007380 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	0f1b      	lsrs	r3, r3, #28
 8007334:	2b09      	cmp	r3, #9
 8007336:	d80b      	bhi.n	8007350 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	0f1b      	lsrs	r3, r3, #28
 800733c:	b2da      	uxtb	r2, r3
 800733e:	7dfb      	ldrb	r3, [r7, #23]
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	4619      	mov	r1, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	440b      	add	r3, r1
 8007348:	3230      	adds	r2, #48	; 0x30
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]
 800734e:	e00a      	b.n	8007366 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	0f1b      	lsrs	r3, r3, #28
 8007354:	b2da      	uxtb	r2, r3
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	4619      	mov	r1, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	440b      	add	r3, r1
 8007360:	3237      	adds	r2, #55	; 0x37
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800736c:	7dfb      	ldrb	r3, [r7, #23]
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	3301      	adds	r3, #1
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	3301      	adds	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]
 8007380:	7dfa      	ldrb	r2, [r7, #23]
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	429a      	cmp	r2, r3
 8007386:	d3d3      	bcc.n	8007330 <IntToUnicode+0x18>
  }
}
 8007388:	bf00      	nop
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a0d      	ldr	r2, [pc, #52]	; (80073d8 <HAL_PCD_MspInit+0x44>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d113      	bne.n	80073ce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <HAL_PCD_MspInit+0x48>)
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	4a0c      	ldr	r2, [pc, #48]	; (80073dc <HAL_PCD_MspInit+0x48>)
 80073ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073b0:	61d3      	str	r3, [r2, #28]
 80073b2:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <HAL_PCD_MspInit+0x48>)
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80073be:	2200      	movs	r2, #0
 80073c0:	2100      	movs	r1, #0
 80073c2:	2014      	movs	r0, #20
 80073c4:	f7f9 fa63 	bl	800088e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80073c8:	2014      	movs	r0, #20
 80073ca:	f7f9 fa7c 	bl	80008c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	40005c00 	.word	0x40005c00
 80073dc:	40021000 	.word	0x40021000

080073e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80073f4:	4619      	mov	r1, r3
 80073f6:	4610      	mov	r0, r2
 80073f8:	f7fe fd35 	bl	8005e66 <USBD_LL_SetupStage>
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007416:	78fa      	ldrb	r2, [r7, #3]
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	440b      	add	r3, r1
 8007424:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	4619      	mov	r1, r3
 800742e:	f7fe fd67 	bl	8005f00 <USBD_LL_DataOutStage>
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800744c:	78fa      	ldrb	r2, [r7, #3]
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	440b      	add	r3, r1
 800745a:	333c      	adds	r3, #60	; 0x3c
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	4619      	mov	r1, r3
 8007462:	f7fe fdbe 	bl	8005fe2 <USBD_LL_DataInStage>
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe fece 	bl	800621e <USBD_LL_SOF>
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007492:	2301      	movs	r3, #1
 8007494:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d001      	beq.n	80074a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800749e:	f7f8 ff3f 	bl	8000320 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80074a8:	7bfa      	ldrb	r2, [r7, #15]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe fe7e 	bl	80061ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fe37 	bl	800612c <USBD_LL_Reset>
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fe78 	bl	80061cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074e4:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <HAL_PCD_SuspendCallback+0x30>)
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	4a03      	ldr	r2, [pc, #12]	; (80074f8 <HAL_PCD_SuspendCallback+0x30>)
 80074ea:	f043 0306 	orr.w	r3, r3, #6
 80074ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	e000ed00 	.word	0xe000ed00

080074fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fe72 	bl	80061f4 <USBD_LL_Resume>
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007520:	4a28      	ldr	r2, [pc, #160]	; (80075c4 <USBD_LL_Init+0xac>)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a26      	ldr	r2, [pc, #152]	; (80075c4 <USBD_LL_Init+0xac>)
 800752c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007530:	4b24      	ldr	r3, [pc, #144]	; (80075c4 <USBD_LL_Init+0xac>)
 8007532:	4a25      	ldr	r2, [pc, #148]	; (80075c8 <USBD_LL_Init+0xb0>)
 8007534:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007536:	4b23      	ldr	r3, [pc, #140]	; (80075c4 <USBD_LL_Init+0xac>)
 8007538:	2208      	movs	r2, #8
 800753a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800753c:	4b21      	ldr	r3, [pc, #132]	; (80075c4 <USBD_LL_Init+0xac>)
 800753e:	2202      	movs	r2, #2
 8007540:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007542:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <USBD_LL_Init+0xac>)
 8007544:	2200      	movs	r2, #0
 8007546:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007548:	4b1e      	ldr	r3, [pc, #120]	; (80075c4 <USBD_LL_Init+0xac>)
 800754a:	2200      	movs	r2, #0
 800754c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800754e:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <USBD_LL_Init+0xac>)
 8007550:	2200      	movs	r2, #0
 8007552:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007554:	481b      	ldr	r0, [pc, #108]	; (80075c4 <USBD_LL_Init+0xac>)
 8007556:	f7f9 fb86 	bl	8000c66 <HAL_PCD_Init>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007560:	f7f8 fede 	bl	8000320 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800756a:	2318      	movs	r3, #24
 800756c:	2200      	movs	r2, #0
 800756e:	2100      	movs	r1, #0
 8007570:	f7fb f8a5 	bl	80026be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800757a:	2358      	movs	r3, #88	; 0x58
 800757c:	2200      	movs	r2, #0
 800757e:	2180      	movs	r1, #128	; 0x80
 8007580:	f7fb f89d 	bl	80026be <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800758a:	23c0      	movs	r3, #192	; 0xc0
 800758c:	2200      	movs	r2, #0
 800758e:	2181      	movs	r1, #129	; 0x81
 8007590:	f7fb f895 	bl	80026be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800759a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800759e:	2200      	movs	r2, #0
 80075a0:	2101      	movs	r1, #1
 80075a2:	f7fb f88c 	bl	80026be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075b0:	2200      	movs	r2, #0
 80075b2:	2182      	movs	r1, #130	; 0x82
 80075b4:	f7fb f883 	bl	80026be <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20000cc4 	.word	0x20000cc4
 80075c8:	40005c00 	.word	0x40005c00

080075cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7f9 fc3e 	bl	8000e64 <HAL_PCD_Start>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f94e 	bl	8007890 <USBD_Get_USB_Status>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	4608      	mov	r0, r1
 800760c:	4611      	mov	r1, r2
 800760e:	461a      	mov	r2, r3
 8007610:	4603      	mov	r3, r0
 8007612:	70fb      	strb	r3, [r7, #3]
 8007614:	460b      	mov	r3, r1
 8007616:	70bb      	strb	r3, [r7, #2]
 8007618:	4613      	mov	r3, r2
 800761a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800762a:	78bb      	ldrb	r3, [r7, #2]
 800762c:	883a      	ldrh	r2, [r7, #0]
 800762e:	78f9      	ldrb	r1, [r7, #3]
 8007630:	f7f9 fd93 	bl	800115a <HAL_PCD_EP_Open>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f928 	bl	8007890 <USBD_Get_USB_Status>
 8007640:	4603      	mov	r3, r0
 8007642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007644:	7bbb      	ldrb	r3, [r7, #14]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7f9 fdd1 	bl	8001214 <HAL_PCD_EP_Close>
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f909 	bl	8007890 <USBD_Get_USB_Status>
 800767e:	4603      	mov	r3, r0
 8007680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007682:	7bbb      	ldrb	r3, [r7, #14]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076a6:	78fa      	ldrb	r2, [r7, #3]
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7f9 fe79 	bl	80013a2 <HAL_PCD_EP_SetStall>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f8ea 	bl	8007890 <USBD_Get_USB_Status>
 80076bc:	4603      	mov	r3, r0
 80076be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	4611      	mov	r1, r2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7f9 feba 	bl	8001462 <HAL_PCD_EP_ClrStall>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 f8cb 	bl	8007890 <USBD_Get_USB_Status>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800771a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800771c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007720:	2b00      	cmp	r3, #0
 8007722:	da0c      	bge.n	800773e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772a:	68f9      	ldr	r1, [r7, #12]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	440b      	add	r3, r1
 8007738:	3302      	adds	r3, #2
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	e00b      	b.n	8007756 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007744:	68f9      	ldr	r1, [r7, #12]
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	440b      	add	r3, r1
 8007750:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007754:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	bc80      	pop	{r7}
 800775e:	4770      	bx	lr

08007760 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800777a:	78fa      	ldrb	r2, [r7, #3]
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f7f9 fcc6 	bl	8001110 <HAL_PCD_SetAddress>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f880 	bl	8007890 <USBD_Get_USB_Status>
 8007790:	4603      	mov	r3, r0
 8007792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007794:	7bbb      	ldrb	r3, [r7, #14]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	461a      	mov	r2, r3
 80077aa:	460b      	mov	r3, r1
 80077ac:	72fb      	strb	r3, [r7, #11]
 80077ae:	4613      	mov	r3, r2
 80077b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077c0:	893b      	ldrh	r3, [r7, #8]
 80077c2:	7af9      	ldrb	r1, [r7, #11]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	f7f9 fdb5 	bl	8001334 <HAL_PCD_EP_Transmit>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 f85d 	bl	8007890 <USBD_Get_USB_Status>
 80077d6:	4603      	mov	r3, r0
 80077d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077da:	7dbb      	ldrb	r3, [r7, #22]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	607a      	str	r2, [r7, #4]
 80077ee:	461a      	mov	r2, r3
 80077f0:	460b      	mov	r3, r1
 80077f2:	72fb      	strb	r3, [r7, #11]
 80077f4:	4613      	mov	r3, r2
 80077f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007806:	893b      	ldrh	r3, [r7, #8]
 8007808:	7af9      	ldrb	r1, [r7, #11]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	f7f9 fd4a 	bl	80012a4 <HAL_PCD_EP_Receive>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 f83a 	bl	8007890 <USBD_Get_USB_Status>
 800781c:	4603      	mov	r3, r0
 800781e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007820:	7dbb      	ldrb	r3, [r7, #22]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	460b      	mov	r3, r1
 8007834:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800783c:	78fa      	ldrb	r2, [r7, #3]
 800783e:	4611      	mov	r1, r2
 8007840:	4618      	mov	r0, r3
 8007842:	f7f9 fd60 	bl	8001306 <HAL_PCD_EP_GetRxCount>
 8007846:	4603      	mov	r3, r0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007858:	4b02      	ldr	r3, [pc, #8]	; (8007864 <USBD_static_malloc+0x14>)
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr
 8007864:	20000fb4 	.word	0x20000fb4

08007868 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]

}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr

0800787a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr

08007890 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800789e:	79fb      	ldrb	r3, [r7, #7]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d817      	bhi.n	80078d4 <USBD_Get_USB_Status+0x44>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <USBD_Get_USB_Status+0x1c>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	080078bd 	.word	0x080078bd
 80078b0:	080078c3 	.word	0x080078c3
 80078b4:	080078c9 	.word	0x080078c9
 80078b8:	080078cf 	.word	0x080078cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
    break;
 80078c0:	e00b      	b.n	80078da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078c2:	2302      	movs	r3, #2
 80078c4:	73fb      	strb	r3, [r7, #15]
    break;
 80078c6:	e008      	b.n	80078da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078c8:	2301      	movs	r3, #1
 80078ca:	73fb      	strb	r3, [r7, #15]
    break;
 80078cc:	e005      	b.n	80078da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078ce:	2302      	movs	r3, #2
 80078d0:	73fb      	strb	r3, [r7, #15]
    break;
 80078d2:	e002      	b.n	80078da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078d4:	2302      	movs	r3, #2
 80078d6:	73fb      	strb	r3, [r7, #15]
    break;
 80078d8:	bf00      	nop
  }
  return usb_status;
 80078da:	7bfb      	ldrb	r3, [r7, #15]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop

080078e8 <main>:


#include "main.h"

int main(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  hwInit();
 80078ec:	f7f8 fe8d 	bl	800060a <hwInit>
  apInit();
 80078f0:	f7f8 fc2c 	bl	800014c <apInit>

  apMain();
 80078f4:	f7f8 fc34 	bl	8000160 <apMain>

  return 0;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	bd80      	pop	{r7, pc}

080078fe <_vsniprintf_r>:
 80078fe:	b530      	push	{r4, r5, lr}
 8007900:	4614      	mov	r4, r2
 8007902:	2c00      	cmp	r4, #0
 8007904:	4605      	mov	r5, r0
 8007906:	461a      	mov	r2, r3
 8007908:	b09b      	sub	sp, #108	; 0x6c
 800790a:	da05      	bge.n	8007918 <_vsniprintf_r+0x1a>
 800790c:	238b      	movs	r3, #139	; 0x8b
 800790e:	6003      	str	r3, [r0, #0]
 8007910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007914:	b01b      	add	sp, #108	; 0x6c
 8007916:	bd30      	pop	{r4, r5, pc}
 8007918:	f44f 7302 	mov.w	r3, #520	; 0x208
 800791c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007920:	bf0c      	ite	eq
 8007922:	4623      	moveq	r3, r4
 8007924:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	9305      	str	r3, [sp, #20]
 800792c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007930:	9100      	str	r1, [sp, #0]
 8007932:	9104      	str	r1, [sp, #16]
 8007934:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007938:	4669      	mov	r1, sp
 800793a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800793c:	f000 f8a6 	bl	8007a8c <_svfiprintf_r>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	bfbc      	itt	lt
 8007944:	238b      	movlt	r3, #139	; 0x8b
 8007946:	602b      	strlt	r3, [r5, #0]
 8007948:	2c00      	cmp	r4, #0
 800794a:	d0e3      	beq.n	8007914 <_vsniprintf_r+0x16>
 800794c:	2200      	movs	r2, #0
 800794e:	9b00      	ldr	r3, [sp, #0]
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e7df      	b.n	8007914 <_vsniprintf_r+0x16>

08007954 <vsniprintf>:
 8007954:	b507      	push	{r0, r1, r2, lr}
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	4613      	mov	r3, r2
 800795a:	460a      	mov	r2, r1
 800795c:	4601      	mov	r1, r0
 800795e:	4803      	ldr	r0, [pc, #12]	; (800796c <vsniprintf+0x18>)
 8007960:	6800      	ldr	r0, [r0, #0]
 8007962:	f7ff ffcc 	bl	80078fe <_vsniprintf_r>
 8007966:	b003      	add	sp, #12
 8007968:	f85d fb04 	ldr.w	pc, [sp], #4
 800796c:	200001c8 	.word	0x200001c8

08007970 <memset>:
 8007970:	4603      	mov	r3, r0
 8007972:	4402      	add	r2, r0
 8007974:	4293      	cmp	r3, r2
 8007976:	d100      	bne.n	800797a <memset+0xa>
 8007978:	4770      	bx	lr
 800797a:	f803 1b01 	strb.w	r1, [r3], #1
 800797e:	e7f9      	b.n	8007974 <memset+0x4>

08007980 <__errno>:
 8007980:	4b01      	ldr	r3, [pc, #4]	; (8007988 <__errno+0x8>)
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	200001c8 	.word	0x200001c8

0800798c <__libc_init_array>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	2600      	movs	r6, #0
 8007990:	4d0c      	ldr	r5, [pc, #48]	; (80079c4 <__libc_init_array+0x38>)
 8007992:	4c0d      	ldr	r4, [pc, #52]	; (80079c8 <__libc_init_array+0x3c>)
 8007994:	1b64      	subs	r4, r4, r5
 8007996:	10a4      	asrs	r4, r4, #2
 8007998:	42a6      	cmp	r6, r4
 800799a:	d109      	bne.n	80079b0 <__libc_init_array+0x24>
 800799c:	f000 fc7a 	bl	8008294 <_init>
 80079a0:	2600      	movs	r6, #0
 80079a2:	4d0a      	ldr	r5, [pc, #40]	; (80079cc <__libc_init_array+0x40>)
 80079a4:	4c0a      	ldr	r4, [pc, #40]	; (80079d0 <__libc_init_array+0x44>)
 80079a6:	1b64      	subs	r4, r4, r5
 80079a8:	10a4      	asrs	r4, r4, #2
 80079aa:	42a6      	cmp	r6, r4
 80079ac:	d105      	bne.n	80079ba <__libc_init_array+0x2e>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b4:	4798      	blx	r3
 80079b6:	3601      	adds	r6, #1
 80079b8:	e7ee      	b.n	8007998 <__libc_init_array+0xc>
 80079ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80079be:	4798      	blx	r3
 80079c0:	3601      	adds	r6, #1
 80079c2:	e7f2      	b.n	80079aa <__libc_init_array+0x1e>
 80079c4:	08008360 	.word	0x08008360
 80079c8:	08008360 	.word	0x08008360
 80079cc:	08008360 	.word	0x08008360
 80079d0:	08008364 	.word	0x08008364

080079d4 <__retarget_lock_acquire_recursive>:
 80079d4:	4770      	bx	lr

080079d6 <__retarget_lock_release_recursive>:
 80079d6:	4770      	bx	lr

080079d8 <__ssputs_r>:
 80079d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	461f      	mov	r7, r3
 80079de:	688e      	ldr	r6, [r1, #8]
 80079e0:	4682      	mov	sl, r0
 80079e2:	42be      	cmp	r6, r7
 80079e4:	460c      	mov	r4, r1
 80079e6:	4690      	mov	r8, r2
 80079e8:	680b      	ldr	r3, [r1, #0]
 80079ea:	d82c      	bhi.n	8007a46 <__ssputs_r+0x6e>
 80079ec:	898a      	ldrh	r2, [r1, #12]
 80079ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079f2:	d026      	beq.n	8007a42 <__ssputs_r+0x6a>
 80079f4:	6965      	ldr	r5, [r4, #20]
 80079f6:	6909      	ldr	r1, [r1, #16]
 80079f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079fc:	eba3 0901 	sub.w	r9, r3, r1
 8007a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a04:	1c7b      	adds	r3, r7, #1
 8007a06:	444b      	add	r3, r9
 8007a08:	106d      	asrs	r5, r5, #1
 8007a0a:	429d      	cmp	r5, r3
 8007a0c:	bf38      	it	cc
 8007a0e:	461d      	movcc	r5, r3
 8007a10:	0553      	lsls	r3, r2, #21
 8007a12:	d527      	bpl.n	8007a64 <__ssputs_r+0x8c>
 8007a14:	4629      	mov	r1, r5
 8007a16:	f000 f957 	bl	8007cc8 <_malloc_r>
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	b360      	cbz	r0, 8007a78 <__ssputs_r+0xa0>
 8007a1e:	464a      	mov	r2, r9
 8007a20:	6921      	ldr	r1, [r4, #16]
 8007a22:	f000 fbd9 	bl	80081d8 <memcpy>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	6126      	str	r6, [r4, #16]
 8007a34:	444e      	add	r6, r9
 8007a36:	6026      	str	r6, [r4, #0]
 8007a38:	463e      	mov	r6, r7
 8007a3a:	6165      	str	r5, [r4, #20]
 8007a3c:	eba5 0509 	sub.w	r5, r5, r9
 8007a40:	60a5      	str	r5, [r4, #8]
 8007a42:	42be      	cmp	r6, r7
 8007a44:	d900      	bls.n	8007a48 <__ssputs_r+0x70>
 8007a46:	463e      	mov	r6, r7
 8007a48:	4632      	mov	r2, r6
 8007a4a:	4641      	mov	r1, r8
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	f000 fb8a 	bl	8008166 <memmove>
 8007a52:	2000      	movs	r0, #0
 8007a54:	68a3      	ldr	r3, [r4, #8]
 8007a56:	1b9b      	subs	r3, r3, r6
 8007a58:	60a3      	str	r3, [r4, #8]
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	4433      	add	r3, r6
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a64:	462a      	mov	r2, r5
 8007a66:	f000 fb4f 	bl	8008108 <_realloc_r>
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d1e0      	bne.n	8007a32 <__ssputs_r+0x5a>
 8007a70:	4650      	mov	r0, sl
 8007a72:	6921      	ldr	r1, [r4, #16]
 8007a74:	f000 fbbe 	bl	80081f4 <_free_r>
 8007a78:	230c      	movs	r3, #12
 8007a7a:	f8ca 3000 	str.w	r3, [sl]
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	e7e9      	b.n	8007a60 <__ssputs_r+0x88>

08007a8c <_svfiprintf_r>:
 8007a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	4698      	mov	r8, r3
 8007a92:	898b      	ldrh	r3, [r1, #12]
 8007a94:	4607      	mov	r7, r0
 8007a96:	061b      	lsls	r3, r3, #24
 8007a98:	460d      	mov	r5, r1
 8007a9a:	4614      	mov	r4, r2
 8007a9c:	b09d      	sub	sp, #116	; 0x74
 8007a9e:	d50e      	bpl.n	8007abe <_svfiprintf_r+0x32>
 8007aa0:	690b      	ldr	r3, [r1, #16]
 8007aa2:	b963      	cbnz	r3, 8007abe <_svfiprintf_r+0x32>
 8007aa4:	2140      	movs	r1, #64	; 0x40
 8007aa6:	f000 f90f 	bl	8007cc8 <_malloc_r>
 8007aaa:	6028      	str	r0, [r5, #0]
 8007aac:	6128      	str	r0, [r5, #16]
 8007aae:	b920      	cbnz	r0, 8007aba <_svfiprintf_r+0x2e>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab8:	e0d0      	b.n	8007c5c <_svfiprintf_r+0x1d0>
 8007aba:	2340      	movs	r3, #64	; 0x40
 8007abc:	616b      	str	r3, [r5, #20]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac2:	2320      	movs	r3, #32
 8007ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ac8:	2330      	movs	r3, #48	; 0x30
 8007aca:	f04f 0901 	mov.w	r9, #1
 8007ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ad2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007c74 <_svfiprintf_r+0x1e8>
 8007ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ada:	4623      	mov	r3, r4
 8007adc:	469a      	mov	sl, r3
 8007ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ae2:	b10a      	cbz	r2, 8007ae8 <_svfiprintf_r+0x5c>
 8007ae4:	2a25      	cmp	r2, #37	; 0x25
 8007ae6:	d1f9      	bne.n	8007adc <_svfiprintf_r+0x50>
 8007ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8007aec:	d00b      	beq.n	8007b06 <_svfiprintf_r+0x7a>
 8007aee:	465b      	mov	r3, fp
 8007af0:	4622      	mov	r2, r4
 8007af2:	4629      	mov	r1, r5
 8007af4:	4638      	mov	r0, r7
 8007af6:	f7ff ff6f 	bl	80079d8 <__ssputs_r>
 8007afa:	3001      	adds	r0, #1
 8007afc:	f000 80a9 	beq.w	8007c52 <_svfiprintf_r+0x1c6>
 8007b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b02:	445a      	add	r2, fp
 8007b04:	9209      	str	r2, [sp, #36]	; 0x24
 8007b06:	f89a 3000 	ldrb.w	r3, [sl]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 80a1 	beq.w	8007c52 <_svfiprintf_r+0x1c6>
 8007b10:	2300      	movs	r3, #0
 8007b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b1a:	f10a 0a01 	add.w	sl, sl, #1
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	9307      	str	r3, [sp, #28]
 8007b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b26:	931a      	str	r3, [sp, #104]	; 0x68
 8007b28:	4654      	mov	r4, sl
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b30:	4850      	ldr	r0, [pc, #320]	; (8007c74 <_svfiprintf_r+0x1e8>)
 8007b32:	f000 fb43 	bl	80081bc <memchr>
 8007b36:	9a04      	ldr	r2, [sp, #16]
 8007b38:	b9d8      	cbnz	r0, 8007b72 <_svfiprintf_r+0xe6>
 8007b3a:	06d0      	lsls	r0, r2, #27
 8007b3c:	bf44      	itt	mi
 8007b3e:	2320      	movmi	r3, #32
 8007b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b44:	0711      	lsls	r1, r2, #28
 8007b46:	bf44      	itt	mi
 8007b48:	232b      	movmi	r3, #43	; 0x2b
 8007b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b52:	2b2a      	cmp	r3, #42	; 0x2a
 8007b54:	d015      	beq.n	8007b82 <_svfiprintf_r+0xf6>
 8007b56:	4654      	mov	r4, sl
 8007b58:	2000      	movs	r0, #0
 8007b5a:	f04f 0c0a 	mov.w	ip, #10
 8007b5e:	9a07      	ldr	r2, [sp, #28]
 8007b60:	4621      	mov	r1, r4
 8007b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b66:	3b30      	subs	r3, #48	; 0x30
 8007b68:	2b09      	cmp	r3, #9
 8007b6a:	d94d      	bls.n	8007c08 <_svfiprintf_r+0x17c>
 8007b6c:	b1b0      	cbz	r0, 8007b9c <_svfiprintf_r+0x110>
 8007b6e:	9207      	str	r2, [sp, #28]
 8007b70:	e014      	b.n	8007b9c <_svfiprintf_r+0x110>
 8007b72:	eba0 0308 	sub.w	r3, r0, r8
 8007b76:	fa09 f303 	lsl.w	r3, r9, r3
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	46a2      	mov	sl, r4
 8007b7e:	9304      	str	r3, [sp, #16]
 8007b80:	e7d2      	b.n	8007b28 <_svfiprintf_r+0x9c>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	1d19      	adds	r1, r3, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	9103      	str	r1, [sp, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bfbb      	ittet	lt
 8007b8e:	425b      	neglt	r3, r3
 8007b90:	f042 0202 	orrlt.w	r2, r2, #2
 8007b94:	9307      	strge	r3, [sp, #28]
 8007b96:	9307      	strlt	r3, [sp, #28]
 8007b98:	bfb8      	it	lt
 8007b9a:	9204      	strlt	r2, [sp, #16]
 8007b9c:	7823      	ldrb	r3, [r4, #0]
 8007b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8007ba0:	d10c      	bne.n	8007bbc <_svfiprintf_r+0x130>
 8007ba2:	7863      	ldrb	r3, [r4, #1]
 8007ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba6:	d134      	bne.n	8007c12 <_svfiprintf_r+0x186>
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	3402      	adds	r4, #2
 8007bac:	1d1a      	adds	r2, r3, #4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	9203      	str	r2, [sp, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfb8      	it	lt
 8007bb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bba:	9305      	str	r3, [sp, #20]
 8007bbc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007c78 <_svfiprintf_r+0x1ec>
 8007bc0:	2203      	movs	r2, #3
 8007bc2:	4650      	mov	r0, sl
 8007bc4:	7821      	ldrb	r1, [r4, #0]
 8007bc6:	f000 faf9 	bl	80081bc <memchr>
 8007bca:	b138      	cbz	r0, 8007bdc <_svfiprintf_r+0x150>
 8007bcc:	2240      	movs	r2, #64	; 0x40
 8007bce:	9b04      	ldr	r3, [sp, #16]
 8007bd0:	eba0 000a 	sub.w	r0, r0, sl
 8007bd4:	4082      	lsls	r2, r0
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	3401      	adds	r4, #1
 8007bda:	9304      	str	r3, [sp, #16]
 8007bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be0:	2206      	movs	r2, #6
 8007be2:	4826      	ldr	r0, [pc, #152]	; (8007c7c <_svfiprintf_r+0x1f0>)
 8007be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007be8:	f000 fae8 	bl	80081bc <memchr>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d038      	beq.n	8007c62 <_svfiprintf_r+0x1d6>
 8007bf0:	4b23      	ldr	r3, [pc, #140]	; (8007c80 <_svfiprintf_r+0x1f4>)
 8007bf2:	bb1b      	cbnz	r3, 8007c3c <_svfiprintf_r+0x1b0>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	3307      	adds	r3, #7
 8007bf8:	f023 0307 	bic.w	r3, r3, #7
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	9303      	str	r3, [sp, #12]
 8007c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c02:	4433      	add	r3, r6
 8007c04:	9309      	str	r3, [sp, #36]	; 0x24
 8007c06:	e768      	b.n	8007ada <_svfiprintf_r+0x4e>
 8007c08:	460c      	mov	r4, r1
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c10:	e7a6      	b.n	8007b60 <_svfiprintf_r+0xd4>
 8007c12:	2300      	movs	r3, #0
 8007c14:	f04f 0c0a 	mov.w	ip, #10
 8007c18:	4619      	mov	r1, r3
 8007c1a:	3401      	adds	r4, #1
 8007c1c:	9305      	str	r3, [sp, #20]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c24:	3a30      	subs	r2, #48	; 0x30
 8007c26:	2a09      	cmp	r2, #9
 8007c28:	d903      	bls.n	8007c32 <_svfiprintf_r+0x1a6>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0c6      	beq.n	8007bbc <_svfiprintf_r+0x130>
 8007c2e:	9105      	str	r1, [sp, #20]
 8007c30:	e7c4      	b.n	8007bbc <_svfiprintf_r+0x130>
 8007c32:	4604      	mov	r4, r0
 8007c34:	2301      	movs	r3, #1
 8007c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c3a:	e7f0      	b.n	8007c1e <_svfiprintf_r+0x192>
 8007c3c:	ab03      	add	r3, sp, #12
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	462a      	mov	r2, r5
 8007c42:	4638      	mov	r0, r7
 8007c44:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <_svfiprintf_r+0x1f8>)
 8007c46:	a904      	add	r1, sp, #16
 8007c48:	f3af 8000 	nop.w
 8007c4c:	1c42      	adds	r2, r0, #1
 8007c4e:	4606      	mov	r6, r0
 8007c50:	d1d6      	bne.n	8007c00 <_svfiprintf_r+0x174>
 8007c52:	89ab      	ldrh	r3, [r5, #12]
 8007c54:	065b      	lsls	r3, r3, #25
 8007c56:	f53f af2d 	bmi.w	8007ab4 <_svfiprintf_r+0x28>
 8007c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c5c:	b01d      	add	sp, #116	; 0x74
 8007c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c62:	ab03      	add	r3, sp, #12
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	462a      	mov	r2, r5
 8007c68:	4638      	mov	r0, r7
 8007c6a:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <_svfiprintf_r+0x1f8>)
 8007c6c:	a904      	add	r1, sp, #16
 8007c6e:	f000 f91d 	bl	8007eac <_printf_i>
 8007c72:	e7eb      	b.n	8007c4c <_svfiprintf_r+0x1c0>
 8007c74:	0800832a 	.word	0x0800832a
 8007c78:	08008330 	.word	0x08008330
 8007c7c:	08008334 	.word	0x08008334
 8007c80:	00000000 	.word	0x00000000
 8007c84:	080079d9 	.word	0x080079d9

08007c88 <sbrk_aligned>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	4e0e      	ldr	r6, [pc, #56]	; (8007cc4 <sbrk_aligned+0x3c>)
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	6831      	ldr	r1, [r6, #0]
 8007c90:	4605      	mov	r5, r0
 8007c92:	b911      	cbnz	r1, 8007c9a <sbrk_aligned+0x12>
 8007c94:	f000 fa82 	bl	800819c <_sbrk_r>
 8007c98:	6030      	str	r0, [r6, #0]
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 fa7d 	bl	800819c <_sbrk_r>
 8007ca2:	1c43      	adds	r3, r0, #1
 8007ca4:	d00a      	beq.n	8007cbc <sbrk_aligned+0x34>
 8007ca6:	1cc4      	adds	r4, r0, #3
 8007ca8:	f024 0403 	bic.w	r4, r4, #3
 8007cac:	42a0      	cmp	r0, r4
 8007cae:	d007      	beq.n	8007cc0 <sbrk_aligned+0x38>
 8007cb0:	1a21      	subs	r1, r4, r0
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 fa72 	bl	800819c <_sbrk_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d101      	bne.n	8007cc0 <sbrk_aligned+0x38>
 8007cbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	20001314 	.word	0x20001314

08007cc8 <_malloc_r>:
 8007cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ccc:	1ccd      	adds	r5, r1, #3
 8007cce:	f025 0503 	bic.w	r5, r5, #3
 8007cd2:	3508      	adds	r5, #8
 8007cd4:	2d0c      	cmp	r5, #12
 8007cd6:	bf38      	it	cc
 8007cd8:	250c      	movcc	r5, #12
 8007cda:	2d00      	cmp	r5, #0
 8007cdc:	4607      	mov	r7, r0
 8007cde:	db01      	blt.n	8007ce4 <_malloc_r+0x1c>
 8007ce0:	42a9      	cmp	r1, r5
 8007ce2:	d905      	bls.n	8007cf0 <_malloc_r+0x28>
 8007ce4:	230c      	movs	r3, #12
 8007ce6:	2600      	movs	r6, #0
 8007ce8:	603b      	str	r3, [r7, #0]
 8007cea:	4630      	mov	r0, r6
 8007cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007dc4 <_malloc_r+0xfc>
 8007cf4:	f000 f9fc 	bl	80080f0 <__malloc_lock>
 8007cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cfc:	461c      	mov	r4, r3
 8007cfe:	bb5c      	cbnz	r4, 8007d58 <_malloc_r+0x90>
 8007d00:	4629      	mov	r1, r5
 8007d02:	4638      	mov	r0, r7
 8007d04:	f7ff ffc0 	bl	8007c88 <sbrk_aligned>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	d155      	bne.n	8007dba <_malloc_r+0xf2>
 8007d0e:	f8d8 4000 	ldr.w	r4, [r8]
 8007d12:	4626      	mov	r6, r4
 8007d14:	2e00      	cmp	r6, #0
 8007d16:	d145      	bne.n	8007da4 <_malloc_r+0xdc>
 8007d18:	2c00      	cmp	r4, #0
 8007d1a:	d048      	beq.n	8007dae <_malloc_r+0xe6>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4638      	mov	r0, r7
 8007d22:	eb04 0903 	add.w	r9, r4, r3
 8007d26:	f000 fa39 	bl	800819c <_sbrk_r>
 8007d2a:	4581      	cmp	r9, r0
 8007d2c:	d13f      	bne.n	8007dae <_malloc_r+0xe6>
 8007d2e:	6821      	ldr	r1, [r4, #0]
 8007d30:	4638      	mov	r0, r7
 8007d32:	1a6d      	subs	r5, r5, r1
 8007d34:	4629      	mov	r1, r5
 8007d36:	f7ff ffa7 	bl	8007c88 <sbrk_aligned>
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d037      	beq.n	8007dae <_malloc_r+0xe6>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	442b      	add	r3, r5
 8007d42:	6023      	str	r3, [r4, #0]
 8007d44:	f8d8 3000 	ldr.w	r3, [r8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d038      	beq.n	8007dbe <_malloc_r+0xf6>
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	42a2      	cmp	r2, r4
 8007d50:	d12b      	bne.n	8007daa <_malloc_r+0xe2>
 8007d52:	2200      	movs	r2, #0
 8007d54:	605a      	str	r2, [r3, #4]
 8007d56:	e00f      	b.n	8007d78 <_malloc_r+0xb0>
 8007d58:	6822      	ldr	r2, [r4, #0]
 8007d5a:	1b52      	subs	r2, r2, r5
 8007d5c:	d41f      	bmi.n	8007d9e <_malloc_r+0xd6>
 8007d5e:	2a0b      	cmp	r2, #11
 8007d60:	d917      	bls.n	8007d92 <_malloc_r+0xca>
 8007d62:	1961      	adds	r1, r4, r5
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	6025      	str	r5, [r4, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	6059      	strne	r1, [r3, #4]
 8007d6c:	6863      	ldr	r3, [r4, #4]
 8007d6e:	bf08      	it	eq
 8007d70:	f8c8 1000 	streq.w	r1, [r8]
 8007d74:	5162      	str	r2, [r4, r5]
 8007d76:	604b      	str	r3, [r1, #4]
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f104 060b 	add.w	r6, r4, #11
 8007d7e:	f000 f9bd 	bl	80080fc <__malloc_unlock>
 8007d82:	f026 0607 	bic.w	r6, r6, #7
 8007d86:	1d23      	adds	r3, r4, #4
 8007d88:	1af2      	subs	r2, r6, r3
 8007d8a:	d0ae      	beq.n	8007cea <_malloc_r+0x22>
 8007d8c:	1b9b      	subs	r3, r3, r6
 8007d8e:	50a3      	str	r3, [r4, r2]
 8007d90:	e7ab      	b.n	8007cea <_malloc_r+0x22>
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	6862      	ldr	r2, [r4, #4]
 8007d96:	d1dd      	bne.n	8007d54 <_malloc_r+0x8c>
 8007d98:	f8c8 2000 	str.w	r2, [r8]
 8007d9c:	e7ec      	b.n	8007d78 <_malloc_r+0xb0>
 8007d9e:	4623      	mov	r3, r4
 8007da0:	6864      	ldr	r4, [r4, #4]
 8007da2:	e7ac      	b.n	8007cfe <_malloc_r+0x36>
 8007da4:	4634      	mov	r4, r6
 8007da6:	6876      	ldr	r6, [r6, #4]
 8007da8:	e7b4      	b.n	8007d14 <_malloc_r+0x4c>
 8007daa:	4613      	mov	r3, r2
 8007dac:	e7cc      	b.n	8007d48 <_malloc_r+0x80>
 8007dae:	230c      	movs	r3, #12
 8007db0:	4638      	mov	r0, r7
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	f000 f9a2 	bl	80080fc <__malloc_unlock>
 8007db8:	e797      	b.n	8007cea <_malloc_r+0x22>
 8007dba:	6025      	str	r5, [r4, #0]
 8007dbc:	e7dc      	b.n	8007d78 <_malloc_r+0xb0>
 8007dbe:	605b      	str	r3, [r3, #4]
 8007dc0:	deff      	udf	#255	; 0xff
 8007dc2:	bf00      	nop
 8007dc4:	20001310 	.word	0x20001310

08007dc8 <_printf_common>:
 8007dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dcc:	4616      	mov	r6, r2
 8007dce:	4699      	mov	r9, r3
 8007dd0:	688a      	ldr	r2, [r1, #8]
 8007dd2:	690b      	ldr	r3, [r1, #16]
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	bfb8      	it	lt
 8007dda:	4613      	movlt	r3, r2
 8007ddc:	6033      	str	r3, [r6, #0]
 8007dde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007de2:	460c      	mov	r4, r1
 8007de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007de8:	b10a      	cbz	r2, 8007dee <_printf_common+0x26>
 8007dea:	3301      	adds	r3, #1
 8007dec:	6033      	str	r3, [r6, #0]
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	0699      	lsls	r1, r3, #26
 8007df2:	bf42      	ittt	mi
 8007df4:	6833      	ldrmi	r3, [r6, #0]
 8007df6:	3302      	addmi	r3, #2
 8007df8:	6033      	strmi	r3, [r6, #0]
 8007dfa:	6825      	ldr	r5, [r4, #0]
 8007dfc:	f015 0506 	ands.w	r5, r5, #6
 8007e00:	d106      	bne.n	8007e10 <_printf_common+0x48>
 8007e02:	f104 0a19 	add.w	sl, r4, #25
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	6832      	ldr	r2, [r6, #0]
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	42ab      	cmp	r3, r5
 8007e0e:	dc2b      	bgt.n	8007e68 <_printf_common+0xa0>
 8007e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e14:	1e13      	subs	r3, r2, #0
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	bf18      	it	ne
 8007e1a:	2301      	movne	r3, #1
 8007e1c:	0692      	lsls	r2, r2, #26
 8007e1e:	d430      	bmi.n	8007e82 <_printf_common+0xba>
 8007e20:	4649      	mov	r1, r9
 8007e22:	4638      	mov	r0, r7
 8007e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e28:	47c0      	blx	r8
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d023      	beq.n	8007e76 <_printf_common+0xae>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	6922      	ldr	r2, [r4, #16]
 8007e32:	f003 0306 	and.w	r3, r3, #6
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	bf14      	ite	ne
 8007e3a:	2500      	movne	r5, #0
 8007e3c:	6833      	ldreq	r3, [r6, #0]
 8007e3e:	f04f 0600 	mov.w	r6, #0
 8007e42:	bf08      	it	eq
 8007e44:	68e5      	ldreq	r5, [r4, #12]
 8007e46:	f104 041a 	add.w	r4, r4, #26
 8007e4a:	bf08      	it	eq
 8007e4c:	1aed      	subeq	r5, r5, r3
 8007e4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007e52:	bf08      	it	eq
 8007e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	bfc4      	itt	gt
 8007e5c:	1a9b      	subgt	r3, r3, r2
 8007e5e:	18ed      	addgt	r5, r5, r3
 8007e60:	42b5      	cmp	r5, r6
 8007e62:	d11a      	bne.n	8007e9a <_printf_common+0xd2>
 8007e64:	2000      	movs	r0, #0
 8007e66:	e008      	b.n	8007e7a <_printf_common+0xb2>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4652      	mov	r2, sl
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	4638      	mov	r0, r7
 8007e70:	47c0      	blx	r8
 8007e72:	3001      	adds	r0, #1
 8007e74:	d103      	bne.n	8007e7e <_printf_common+0xb6>
 8007e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7e:	3501      	adds	r5, #1
 8007e80:	e7c1      	b.n	8007e06 <_printf_common+0x3e>
 8007e82:	2030      	movs	r0, #48	; 0x30
 8007e84:	18e1      	adds	r1, r4, r3
 8007e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e90:	4422      	add	r2, r4
 8007e92:	3302      	adds	r3, #2
 8007e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e98:	e7c2      	b.n	8007e20 <_printf_common+0x58>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	47c0      	blx	r8
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d0e6      	beq.n	8007e76 <_printf_common+0xae>
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	e7d9      	b.n	8007e60 <_printf_common+0x98>

08007eac <_printf_i>:
 8007eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb0:	7e0f      	ldrb	r7, [r1, #24]
 8007eb2:	4691      	mov	r9, r2
 8007eb4:	2f78      	cmp	r7, #120	; 0x78
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	460c      	mov	r4, r1
 8007eba:	469a      	mov	sl, r3
 8007ebc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ec2:	d807      	bhi.n	8007ed4 <_printf_i+0x28>
 8007ec4:	2f62      	cmp	r7, #98	; 0x62
 8007ec6:	d80a      	bhi.n	8007ede <_printf_i+0x32>
 8007ec8:	2f00      	cmp	r7, #0
 8007eca:	f000 80d5 	beq.w	8008078 <_printf_i+0x1cc>
 8007ece:	2f58      	cmp	r7, #88	; 0x58
 8007ed0:	f000 80c1 	beq.w	8008056 <_printf_i+0x1aa>
 8007ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007edc:	e03a      	b.n	8007f54 <_printf_i+0xa8>
 8007ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ee2:	2b15      	cmp	r3, #21
 8007ee4:	d8f6      	bhi.n	8007ed4 <_printf_i+0x28>
 8007ee6:	a101      	add	r1, pc, #4	; (adr r1, 8007eec <_printf_i+0x40>)
 8007ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f59 	.word	0x08007f59
 8007ef4:	08007ed5 	.word	0x08007ed5
 8007ef8:	08007ed5 	.word	0x08007ed5
 8007efc:	08007ed5 	.word	0x08007ed5
 8007f00:	08007ed5 	.word	0x08007ed5
 8007f04:	08007f59 	.word	0x08007f59
 8007f08:	08007ed5 	.word	0x08007ed5
 8007f0c:	08007ed5 	.word	0x08007ed5
 8007f10:	08007ed5 	.word	0x08007ed5
 8007f14:	08007ed5 	.word	0x08007ed5
 8007f18:	0800805f 	.word	0x0800805f
 8007f1c:	08007f85 	.word	0x08007f85
 8007f20:	08008019 	.word	0x08008019
 8007f24:	08007ed5 	.word	0x08007ed5
 8007f28:	08007ed5 	.word	0x08007ed5
 8007f2c:	08008081 	.word	0x08008081
 8007f30:	08007ed5 	.word	0x08007ed5
 8007f34:	08007f85 	.word	0x08007f85
 8007f38:	08007ed5 	.word	0x08007ed5
 8007f3c:	08007ed5 	.word	0x08007ed5
 8007f40:	08008021 	.word	0x08008021
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	602a      	str	r2, [r5, #0]
 8007f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0a0      	b.n	800809a <_printf_i+0x1ee>
 8007f58:	6820      	ldr	r0, [r4, #0]
 8007f5a:	682b      	ldr	r3, [r5, #0]
 8007f5c:	0607      	lsls	r7, r0, #24
 8007f5e:	f103 0104 	add.w	r1, r3, #4
 8007f62:	6029      	str	r1, [r5, #0]
 8007f64:	d501      	bpl.n	8007f6a <_printf_i+0xbe>
 8007f66:	681e      	ldr	r6, [r3, #0]
 8007f68:	e003      	b.n	8007f72 <_printf_i+0xc6>
 8007f6a:	0646      	lsls	r6, r0, #25
 8007f6c:	d5fb      	bpl.n	8007f66 <_printf_i+0xba>
 8007f6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	da03      	bge.n	8007f7e <_printf_i+0xd2>
 8007f76:	232d      	movs	r3, #45	; 0x2d
 8007f78:	4276      	negs	r6, r6
 8007f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f7e:	230a      	movs	r3, #10
 8007f80:	4859      	ldr	r0, [pc, #356]	; (80080e8 <_printf_i+0x23c>)
 8007f82:	e012      	b.n	8007faa <_printf_i+0xfe>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	6820      	ldr	r0, [r4, #0]
 8007f88:	1d19      	adds	r1, r3, #4
 8007f8a:	6029      	str	r1, [r5, #0]
 8007f8c:	0605      	lsls	r5, r0, #24
 8007f8e:	d501      	bpl.n	8007f94 <_printf_i+0xe8>
 8007f90:	681e      	ldr	r6, [r3, #0]
 8007f92:	e002      	b.n	8007f9a <_printf_i+0xee>
 8007f94:	0641      	lsls	r1, r0, #25
 8007f96:	d5fb      	bpl.n	8007f90 <_printf_i+0xe4>
 8007f98:	881e      	ldrh	r6, [r3, #0]
 8007f9a:	2f6f      	cmp	r7, #111	; 0x6f
 8007f9c:	bf0c      	ite	eq
 8007f9e:	2308      	moveq	r3, #8
 8007fa0:	230a      	movne	r3, #10
 8007fa2:	4851      	ldr	r0, [pc, #324]	; (80080e8 <_printf_i+0x23c>)
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007faa:	6865      	ldr	r5, [r4, #4]
 8007fac:	2d00      	cmp	r5, #0
 8007fae:	bfa8      	it	ge
 8007fb0:	6821      	ldrge	r1, [r4, #0]
 8007fb2:	60a5      	str	r5, [r4, #8]
 8007fb4:	bfa4      	itt	ge
 8007fb6:	f021 0104 	bicge.w	r1, r1, #4
 8007fba:	6021      	strge	r1, [r4, #0]
 8007fbc:	b90e      	cbnz	r6, 8007fc2 <_printf_i+0x116>
 8007fbe:	2d00      	cmp	r5, #0
 8007fc0:	d04b      	beq.n	800805a <_printf_i+0x1ae>
 8007fc2:	4615      	mov	r5, r2
 8007fc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fc8:	fb03 6711 	mls	r7, r3, r1, r6
 8007fcc:	5dc7      	ldrb	r7, [r0, r7]
 8007fce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fd2:	4637      	mov	r7, r6
 8007fd4:	42bb      	cmp	r3, r7
 8007fd6:	460e      	mov	r6, r1
 8007fd8:	d9f4      	bls.n	8007fc4 <_printf_i+0x118>
 8007fda:	2b08      	cmp	r3, #8
 8007fdc:	d10b      	bne.n	8007ff6 <_printf_i+0x14a>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	07de      	lsls	r6, r3, #31
 8007fe2:	d508      	bpl.n	8007ff6 <_printf_i+0x14a>
 8007fe4:	6923      	ldr	r3, [r4, #16]
 8007fe6:	6861      	ldr	r1, [r4, #4]
 8007fe8:	4299      	cmp	r1, r3
 8007fea:	bfde      	ittt	le
 8007fec:	2330      	movle	r3, #48	; 0x30
 8007fee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ff2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ff6:	1b52      	subs	r2, r2, r5
 8007ff8:	6122      	str	r2, [r4, #16]
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4640      	mov	r0, r8
 8008000:	f8cd a000 	str.w	sl, [sp]
 8008004:	aa03      	add	r2, sp, #12
 8008006:	f7ff fedf 	bl	8007dc8 <_printf_common>
 800800a:	3001      	adds	r0, #1
 800800c:	d14a      	bne.n	80080a4 <_printf_i+0x1f8>
 800800e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008012:	b004      	add	sp, #16
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	f043 0320 	orr.w	r3, r3, #32
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	2778      	movs	r7, #120	; 0x78
 8008022:	4832      	ldr	r0, [pc, #200]	; (80080ec <_printf_i+0x240>)
 8008024:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	6829      	ldr	r1, [r5, #0]
 800802c:	061f      	lsls	r7, r3, #24
 800802e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008032:	d402      	bmi.n	800803a <_printf_i+0x18e>
 8008034:	065f      	lsls	r7, r3, #25
 8008036:	bf48      	it	mi
 8008038:	b2b6      	uxthmi	r6, r6
 800803a:	07df      	lsls	r7, r3, #31
 800803c:	bf48      	it	mi
 800803e:	f043 0320 	orrmi.w	r3, r3, #32
 8008042:	6029      	str	r1, [r5, #0]
 8008044:	bf48      	it	mi
 8008046:	6023      	strmi	r3, [r4, #0]
 8008048:	b91e      	cbnz	r6, 8008052 <_printf_i+0x1a6>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	f023 0320 	bic.w	r3, r3, #32
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	2310      	movs	r3, #16
 8008054:	e7a6      	b.n	8007fa4 <_printf_i+0xf8>
 8008056:	4824      	ldr	r0, [pc, #144]	; (80080e8 <_printf_i+0x23c>)
 8008058:	e7e4      	b.n	8008024 <_printf_i+0x178>
 800805a:	4615      	mov	r5, r2
 800805c:	e7bd      	b.n	8007fda <_printf_i+0x12e>
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	6826      	ldr	r6, [r4, #0]
 8008062:	1d18      	adds	r0, r3, #4
 8008064:	6961      	ldr	r1, [r4, #20]
 8008066:	6028      	str	r0, [r5, #0]
 8008068:	0635      	lsls	r5, r6, #24
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	d501      	bpl.n	8008072 <_printf_i+0x1c6>
 800806e:	6019      	str	r1, [r3, #0]
 8008070:	e002      	b.n	8008078 <_printf_i+0x1cc>
 8008072:	0670      	lsls	r0, r6, #25
 8008074:	d5fb      	bpl.n	800806e <_printf_i+0x1c2>
 8008076:	8019      	strh	r1, [r3, #0]
 8008078:	2300      	movs	r3, #0
 800807a:	4615      	mov	r5, r2
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	e7bc      	b.n	8007ffa <_printf_i+0x14e>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	2100      	movs	r1, #0
 8008084:	1d1a      	adds	r2, r3, #4
 8008086:	602a      	str	r2, [r5, #0]
 8008088:	681d      	ldr	r5, [r3, #0]
 800808a:	6862      	ldr	r2, [r4, #4]
 800808c:	4628      	mov	r0, r5
 800808e:	f000 f895 	bl	80081bc <memchr>
 8008092:	b108      	cbz	r0, 8008098 <_printf_i+0x1ec>
 8008094:	1b40      	subs	r0, r0, r5
 8008096:	6060      	str	r0, [r4, #4]
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	6123      	str	r3, [r4, #16]
 800809c:	2300      	movs	r3, #0
 800809e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a2:	e7aa      	b.n	8007ffa <_printf_i+0x14e>
 80080a4:	462a      	mov	r2, r5
 80080a6:	4649      	mov	r1, r9
 80080a8:	4640      	mov	r0, r8
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	47d0      	blx	sl
 80080ae:	3001      	adds	r0, #1
 80080b0:	d0ad      	beq.n	800800e <_printf_i+0x162>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	079b      	lsls	r3, r3, #30
 80080b6:	d413      	bmi.n	80080e0 <_printf_i+0x234>
 80080b8:	68e0      	ldr	r0, [r4, #12]
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	4298      	cmp	r0, r3
 80080be:	bfb8      	it	lt
 80080c0:	4618      	movlt	r0, r3
 80080c2:	e7a6      	b.n	8008012 <_printf_i+0x166>
 80080c4:	2301      	movs	r3, #1
 80080c6:	4632      	mov	r2, r6
 80080c8:	4649      	mov	r1, r9
 80080ca:	4640      	mov	r0, r8
 80080cc:	47d0      	blx	sl
 80080ce:	3001      	adds	r0, #1
 80080d0:	d09d      	beq.n	800800e <_printf_i+0x162>
 80080d2:	3501      	adds	r5, #1
 80080d4:	68e3      	ldr	r3, [r4, #12]
 80080d6:	9903      	ldr	r1, [sp, #12]
 80080d8:	1a5b      	subs	r3, r3, r1
 80080da:	42ab      	cmp	r3, r5
 80080dc:	dcf2      	bgt.n	80080c4 <_printf_i+0x218>
 80080de:	e7eb      	b.n	80080b8 <_printf_i+0x20c>
 80080e0:	2500      	movs	r5, #0
 80080e2:	f104 0619 	add.w	r6, r4, #25
 80080e6:	e7f5      	b.n	80080d4 <_printf_i+0x228>
 80080e8:	0800833b 	.word	0x0800833b
 80080ec:	0800834c 	.word	0x0800834c

080080f0 <__malloc_lock>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__malloc_lock+0x8>)
 80080f2:	f7ff bc6f 	b.w	80079d4 <__retarget_lock_acquire_recursive>
 80080f6:	bf00      	nop
 80080f8:	2000130c 	.word	0x2000130c

080080fc <__malloc_unlock>:
 80080fc:	4801      	ldr	r0, [pc, #4]	; (8008104 <__malloc_unlock+0x8>)
 80080fe:	f7ff bc6a 	b.w	80079d6 <__retarget_lock_release_recursive>
 8008102:	bf00      	nop
 8008104:	2000130c 	.word	0x2000130c

08008108 <_realloc_r>:
 8008108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810c:	4680      	mov	r8, r0
 800810e:	4614      	mov	r4, r2
 8008110:	460e      	mov	r6, r1
 8008112:	b921      	cbnz	r1, 800811e <_realloc_r+0x16>
 8008114:	4611      	mov	r1, r2
 8008116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811a:	f7ff bdd5 	b.w	8007cc8 <_malloc_r>
 800811e:	b92a      	cbnz	r2, 800812c <_realloc_r+0x24>
 8008120:	f000 f868 	bl	80081f4 <_free_r>
 8008124:	4625      	mov	r5, r4
 8008126:	4628      	mov	r0, r5
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812c:	f000 f8aa 	bl	8008284 <_malloc_usable_size_r>
 8008130:	4284      	cmp	r4, r0
 8008132:	4607      	mov	r7, r0
 8008134:	d802      	bhi.n	800813c <_realloc_r+0x34>
 8008136:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800813a:	d812      	bhi.n	8008162 <_realloc_r+0x5a>
 800813c:	4621      	mov	r1, r4
 800813e:	4640      	mov	r0, r8
 8008140:	f7ff fdc2 	bl	8007cc8 <_malloc_r>
 8008144:	4605      	mov	r5, r0
 8008146:	2800      	cmp	r0, #0
 8008148:	d0ed      	beq.n	8008126 <_realloc_r+0x1e>
 800814a:	42bc      	cmp	r4, r7
 800814c:	4622      	mov	r2, r4
 800814e:	4631      	mov	r1, r6
 8008150:	bf28      	it	cs
 8008152:	463a      	movcs	r2, r7
 8008154:	f000 f840 	bl	80081d8 <memcpy>
 8008158:	4631      	mov	r1, r6
 800815a:	4640      	mov	r0, r8
 800815c:	f000 f84a 	bl	80081f4 <_free_r>
 8008160:	e7e1      	b.n	8008126 <_realloc_r+0x1e>
 8008162:	4635      	mov	r5, r6
 8008164:	e7df      	b.n	8008126 <_realloc_r+0x1e>

08008166 <memmove>:
 8008166:	4288      	cmp	r0, r1
 8008168:	b510      	push	{r4, lr}
 800816a:	eb01 0402 	add.w	r4, r1, r2
 800816e:	d902      	bls.n	8008176 <memmove+0x10>
 8008170:	4284      	cmp	r4, r0
 8008172:	4623      	mov	r3, r4
 8008174:	d807      	bhi.n	8008186 <memmove+0x20>
 8008176:	1e43      	subs	r3, r0, #1
 8008178:	42a1      	cmp	r1, r4
 800817a:	d008      	beq.n	800818e <memmove+0x28>
 800817c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008180:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008184:	e7f8      	b.n	8008178 <memmove+0x12>
 8008186:	4601      	mov	r1, r0
 8008188:	4402      	add	r2, r0
 800818a:	428a      	cmp	r2, r1
 800818c:	d100      	bne.n	8008190 <memmove+0x2a>
 800818e:	bd10      	pop	{r4, pc}
 8008190:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008194:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008198:	e7f7      	b.n	800818a <memmove+0x24>
	...

0800819c <_sbrk_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	2300      	movs	r3, #0
 80081a0:	4d05      	ldr	r5, [pc, #20]	; (80081b8 <_sbrk_r+0x1c>)
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	f7f8 f924 	bl	80003f4 <_sbrk>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_sbrk_r+0x1a>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_sbrk_r+0x1a>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20001318 	.word	0x20001318

080081bc <memchr>:
 80081bc:	4603      	mov	r3, r0
 80081be:	b510      	push	{r4, lr}
 80081c0:	b2c9      	uxtb	r1, r1
 80081c2:	4402      	add	r2, r0
 80081c4:	4293      	cmp	r3, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	d101      	bne.n	80081ce <memchr+0x12>
 80081ca:	2000      	movs	r0, #0
 80081cc:	e003      	b.n	80081d6 <memchr+0x1a>
 80081ce:	7804      	ldrb	r4, [r0, #0]
 80081d0:	3301      	adds	r3, #1
 80081d2:	428c      	cmp	r4, r1
 80081d4:	d1f6      	bne.n	80081c4 <memchr+0x8>
 80081d6:	bd10      	pop	{r4, pc}

080081d8 <memcpy>:
 80081d8:	440a      	add	r2, r1
 80081da:	4291      	cmp	r1, r2
 80081dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081e0:	d100      	bne.n	80081e4 <memcpy+0xc>
 80081e2:	4770      	bx	lr
 80081e4:	b510      	push	{r4, lr}
 80081e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ea:	4291      	cmp	r1, r2
 80081ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f0:	d1f9      	bne.n	80081e6 <memcpy+0xe>
 80081f2:	bd10      	pop	{r4, pc}

080081f4 <_free_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4605      	mov	r5, r0
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d040      	beq.n	800827e <_free_r+0x8a>
 80081fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008200:	1f0c      	subs	r4, r1, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfb8      	it	lt
 8008206:	18e4      	addlt	r4, r4, r3
 8008208:	f7ff ff72 	bl	80080f0 <__malloc_lock>
 800820c:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <_free_r+0x8c>)
 800820e:	6813      	ldr	r3, [r2, #0]
 8008210:	b933      	cbnz	r3, 8008220 <_free_r+0x2c>
 8008212:	6063      	str	r3, [r4, #4]
 8008214:	6014      	str	r4, [r2, #0]
 8008216:	4628      	mov	r0, r5
 8008218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800821c:	f7ff bf6e 	b.w	80080fc <__malloc_unlock>
 8008220:	42a3      	cmp	r3, r4
 8008222:	d908      	bls.n	8008236 <_free_r+0x42>
 8008224:	6820      	ldr	r0, [r4, #0]
 8008226:	1821      	adds	r1, r4, r0
 8008228:	428b      	cmp	r3, r1
 800822a:	bf01      	itttt	eq
 800822c:	6819      	ldreq	r1, [r3, #0]
 800822e:	685b      	ldreq	r3, [r3, #4]
 8008230:	1809      	addeq	r1, r1, r0
 8008232:	6021      	streq	r1, [r4, #0]
 8008234:	e7ed      	b.n	8008212 <_free_r+0x1e>
 8008236:	461a      	mov	r2, r3
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	b10b      	cbz	r3, 8008240 <_free_r+0x4c>
 800823c:	42a3      	cmp	r3, r4
 800823e:	d9fa      	bls.n	8008236 <_free_r+0x42>
 8008240:	6811      	ldr	r1, [r2, #0]
 8008242:	1850      	adds	r0, r2, r1
 8008244:	42a0      	cmp	r0, r4
 8008246:	d10b      	bne.n	8008260 <_free_r+0x6c>
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	4401      	add	r1, r0
 800824c:	1850      	adds	r0, r2, r1
 800824e:	4283      	cmp	r3, r0
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	d1e0      	bne.n	8008216 <_free_r+0x22>
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	4408      	add	r0, r1
 800825a:	6010      	str	r0, [r2, #0]
 800825c:	6053      	str	r3, [r2, #4]
 800825e:	e7da      	b.n	8008216 <_free_r+0x22>
 8008260:	d902      	bls.n	8008268 <_free_r+0x74>
 8008262:	230c      	movs	r3, #12
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	e7d6      	b.n	8008216 <_free_r+0x22>
 8008268:	6820      	ldr	r0, [r4, #0]
 800826a:	1821      	adds	r1, r4, r0
 800826c:	428b      	cmp	r3, r1
 800826e:	bf01      	itttt	eq
 8008270:	6819      	ldreq	r1, [r3, #0]
 8008272:	685b      	ldreq	r3, [r3, #4]
 8008274:	1809      	addeq	r1, r1, r0
 8008276:	6021      	streq	r1, [r4, #0]
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	6054      	str	r4, [r2, #4]
 800827c:	e7cb      	b.n	8008216 <_free_r+0x22>
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	20001310 	.word	0x20001310

08008284 <_malloc_usable_size_r>:
 8008284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008288:	1f18      	subs	r0, r3, #4
 800828a:	2b00      	cmp	r3, #0
 800828c:	bfbc      	itt	lt
 800828e:	580b      	ldrlt	r3, [r1, r0]
 8008290:	18c0      	addlt	r0, r0, r3
 8008292:	4770      	bx	lr

08008294 <_init>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr

080082a0 <_fini>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr
